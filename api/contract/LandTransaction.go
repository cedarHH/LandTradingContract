// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// LandRegistryLand is an auto generated low-level Go binding around an user-defined struct.
type LandRegistryLand struct {
	Owner         common.Address
	Location      string
	Area          *big.Int
	IsVerified    bool
	DetailsHash   string
	ReportHash    string
	DocumentsHash string
	IsVaild       bool
}

// LandRegistryUser is an auto generated low-level Go binding around an user-defined struct.
type LandRegistryUser struct {
	Username          string
	LandIdList        []string
	TransactionIdList []*big.Int
	IsVaild           bool
}

// LandTransactionTransaction is an auto generated low-level Go binding around an user-defined struct.
type LandTransactionTransaction struct {
	LandId    string
	From      common.Address
	To        common.Address
	Timestamp *big.Int
	IsVaild   bool
}

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InitiateTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"LandRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"surveyorsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestam\",\"type\":\"uint256\"}],\"name\":\"LandSurveying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"detailsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reportHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"documentsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"notariesAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LandVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransactionRecorded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_area\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reportHash\",\"type\":\"string\"}],\"name\":\"LandSurveyingArea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_notary\",\"type\":\"address\"}],\"name\":\"addNotary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_surveyor\",\"type\":\"address\"}],\"name\":\"addSurveyor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"}],\"name\":\"getLandTransactionHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"getTransactionDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"internalType\":\"structLandTransaction.Transaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lands\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"detailsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reportHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landsTransactionIdList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notaries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"}],\"name\":\"queryLand\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"detailsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reportHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"internalType\":\"structLandRegistry.Land\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"landIdList\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"transactionIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"internalType\":\"structLandRegistry.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_detailsHash\",\"type\":\"string\"}],\"name\":\"registerLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_userName\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"surveyors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"transferVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMapping\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_documentsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isVerified\",\"type\":\"bool\"}],\"name\":\"verifyLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040525f6006553480156012575f80fd5b50604051612b1c380380612b1c833981016040819052602f916060565b5f80546001600160a01b03199081163317909155600180546001600160a01b0390931692909116919091179055608b565b5f60208284031215606f575f80fd5b81516001600160a01b03811681146084575f80fd5b9392505050565b612a84806100985f395ff3fe608060405234801561000f575f80fd5b506004361061013c575f3560e01c80635307d396116100b4578063913831921161007957806391383192146102f75780639ace38c21461030a578063ad812a521461032e578063b1c8ad0d14610341578063b829c12a14610368578063c0e793c21461037b575f80fd5b80635307d396146102705780636af6909d146102855780637dc0d1d01461029857806387b6963f146102c35780638da5cb5b146102e5575f80fd5b80630fa683d3116101055780630fa683d3146101e0578063101dd0eb14610200578063118b95351461021357806314e887e8146102345780634fb2e45d1461023d57806351749d1e14610250575f80fd5b8062e168f014610140578063019a1565146101775780630588565f146101975780630ea126f9146101ac5780630ee4f079146101bf575b5f80fd5b61016261014e366004611f6b565b60056020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61018a610185366004612028565b61038e565b60405161016e919061208f565b6101aa6101a5366004611f6b565b6106fb565b005b6101aa6101ba36600461215b565b610733565b6101d26101cd3660046121a5565b610893565b60405190815260200161016e565b6101f36101ee3660046121e6565b6108cf565b60405161016e91906121fd565b6101aa61020e36600461225e565b6109e0565b610226610221366004611f6b565b610be4565b60405161016e9291906122d8565b6101d260095481565b6101aa61024b366004611f6b565b610c88565b61026361025e366004612028565b610d08565b60405161016e91906122fb565b610278610d76565b60405161016e9190612377565b6101aa610293366004612425565b610f8a565b6001546102ab906001600160a01b031681565b6040516001600160a01b03909116815260200161016e565b6101626102d1366004611f6b565b60046020525f908152604090205460ff1681565b5f546102ab906001600160a01b031681565b6101aa610305366004612490565b611132565b61031d6103183660046121e6565b6114f7565b60405161016e9594939291906124f1565b6101aa61033c366004611f6b565b6115bc565b61035461034f366004612028565b6115f4565b60405161016e989796959493929190612532565b6101aa6103763660046125b6565b61186d565b6101aa61038936600461262b565b611b08565b6103df6040518061010001604052805f6001600160a01b03168152602001606081526020015f81526020015f151581526020016060815260200160608152602001606081526020015f151581525090565b6003826040516103ef9190612675565b9081526040519081900360200190206003015460ff1661044d5760405162461bcd60e51b81526020600482015260146024820152731b185b99081a5cc81b9bdd081d995c9a599a595960621b60448201526064015b60405180910390fd5b60038260405161045d9190612675565b908152604080519182900360209081018320610100840190925281546001600160a01b03168352600182018054918401916104979061268b565b80601f01602080910402602001604051908101604052809291908181526020018280546104c39061268b565b801561050e5780601f106104e55761010080835404028352916020019161050e565b820191905f5260205f20905b8154815290600101906020018083116104f157829003601f168201915b505050918352505060028201546020820152600382015460ff16151560408201526004820180546060909201916105449061268b565b80601f01602080910402602001604051908101604052809291908181526020018280546105709061268b565b80156105bb5780601f10610592576101008083540402835291602001916105bb565b820191905f5260205f20905b81548152906001019060200180831161059e57829003601f168201915b505050505081526020016005820180546105d49061268b565b80601f01602080910402602001604051908101604052809291908181526020018280546106009061268b565b801561064b5780601f106106225761010080835404028352916020019161064b565b820191905f5260205f20905b81548152906001019060200180831161062e57829003601f168201915b505050505081526020016006820180546106649061268b565b80601f01602080910402602001604051908101604052809291908181526020018280546106909061268b565b80156106db5780601f106106b2576101008083540402835291602001916106db565b820191905f5260205f20905b8154815290600101906020018083116106be57829003601f168201915b50505091835250506007919091015460ff16151560209091015292915050565b5f546001600160a01b03163314610710575f80fd5b6001600160a01b03165f908152600560205260409020805460ff19166001179055565b5f546001600160a01b03163314610748575f80fd5b6001600160a01b0382165f9081526002602052604090206003015460ff16156107a45760405162461bcd60e51b815260206004820152600e60248201526d757365722069732065786973747360901b6044820152606401610444565b6040805160808101825282815281515f808252602082810190945291928301916107de565b60608152602001906001900390816107c95790505b5081526020015f60405190808252806020026020018201604052801561080e578160200160208202803683370190505b50815260016020918201526001600160a01b0384165f9081526002909152604090208151819061083e908261270f565b5060208281015180516108579260018501920190611e4d565b5060408201518051610873916002840191602090910190611ea1565b50606091909101516003909101805460ff19169115159190911790555050565b815160208184018101805160088252928201918501919091209190528054829081106108bd575f80fd5b905f5260205f20015f91509150505481565b6040805160a08101825260608082525f60208301819052928201839052810182905260808101919091525f8281526007602052604090819020815160a081019092528054829082906109209061268b565b80601f016020809104026020016040519081016040528092919081815260200182805461094c9061268b565b80156109975780601f1061096e57610100808354040283529160200191610997565b820191905f5260205f20905b81548152906001019060200180831161097a57829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301541660408201526003820154606082015260049091015460ff16151560809091015292915050565b335f9081526005602052604090205460ff16610a2f5760405162461bcd60e51b815260206004820152600e60248201526d4e6f742061206e6f74617269657360901b6044820152606401610444565b600383604051610a3f9190612675565b9081526040519081900360200190206007015460ff16610a965760405162461bcd60e51b81526020600482015260126024820152716c616e64206973206e6f742065786973747360701b6044820152606401610444565b6001546001600160a01b03163314610ae75760405162461bcd60e51b815260206004820152601460248201527313db9b1e481bdc9858db194818d85b8818d85b1b60621b6044820152606401610444565b81600384604051610af89190612675565b90815260200160405180910390206006019081610b15919061270f565b5080600384604051610b279190612675565b908152604051908190036020018120600301805492151560ff19909316929092179091553390610b58908590612675565b60405180910390207f02c254bec0795f97886c74722bdf7fae93289967a7e3fb099a88c723f17f3955600386604051610b919190612675565b9081526020016040518091039020600401600387604051610bb29190612675565b9081526020016040518091039020600501868642604051610bd795949392919061284b565b60405180910390a3505050565b60026020525f9081526040902080548190610bfe9061268b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2a9061268b565b8015610c755780601f10610c4c57610100808354040283529160200191610c75565b820191905f5260205f20905b815481529060010190602001808311610c5857829003601f168201915b5050506003909301549192505060ff1682565b5f546001600160a01b03163314610c9d575f80fd5b6001600160a01b038116610caf575f80fd5b5f80546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35f80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600882604051610d1a9190612675565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015610d6a57602002820191905f5260205f20905b815481526020019060010190808311610d56575b50505050509050919050565b610da260405180608001604052806060815260200160608152602001606081526020015f151581525090565b335f9081526002602052604090819020815160808101909252805482908290610dca9061268b565b80601f0160208091040260200160405190810160405280929190818152602001828054610df69061268b565b8015610e415780601f10610e1857610100808354040283529160200191610e41565b820191905f5260205f20905b815481529060010190602001808311610e2457829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020015f905b82821015610f16578382905f5260205f20018054610e8b9061268b565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb79061268b565b8015610f025780601f10610ed957610100808354040283529160200191610f02565b820191905f5260205f20905b815481529060010190602001808311610ee557829003601f168201915b505050505081526020019060010190610e6e565b50505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f6b57602002820191905f5260205f20905b815481526020019060010190808311610f57575b50505091835250506003919091015460ff161515602090910152919050565b335f9081526004602052604090205460ff16610fd95760405162461bcd60e51b815260206004820152600e60248201526d2737ba10309039bab93b32bcb7b960911b6044820152606401610444565b600383604051610fe99190612675565b9081526040519081900360200190206007015460ff166110405760405162461bcd60e51b81526020600482015260126024820152716c616e64206973206e6f742065786973747360701b6044820152606401610444565b6001546001600160a01b031633146110915760405162461bcd60e51b815260206004820152601460248201527313db9b1e481bdc9858db194818d85b8818d85b1b60621b6044820152606401610444565b816003846040516110a29190612675565b908152602001604051809103902060020181905550806003846040516110c89190612675565b908152602001604051809103902060050190816110e5919061270f565b5060405133906110f6908590612675565b60408051918290038220858352426020840152917fc200ae8df18b7f538d348a1b0a8fb6b591cabace3b6c1b309e0cec72530930429101610bd7565b6001546001600160a01b03163314611148575f80fd5b5f8181526007602052604090206004015460ff16156111a95760405162461bcd60e51b815260206004820152601760248201527f7472616e73616374696f6e4964206973206578697374730000000000000000006044820152606401610444565b6111b38484611cd5565b6111f65760405162461bcd60e51b81526020600482015260146024820152731b9bdd08199c9bdb5059191c995cdcc81b185b9960621b6044820152606401610444565b816001600160a01b0316836001600160a01b0316036112575760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74206265207472616e7366657272656420746f206f6e6573656c666044820152606401610444565b6003846040516112679190612675565b9081526040519081900360200190206003015460ff166112c55760405162461bcd60e51b81526020600482015260196024820152781d1a1a5cc81b185b99081a5cc81b9bdd0815995c9a599a5959603a1b6044820152606401610444565b6001600160a01b0382165f9081526002602052604090206003015460ff166113265760405162461bcd60e51b8152602060048201526014602482015273746f55736572206973206e6f742065786973747360601b6044820152606401610444565b6001600160a01b0382165f9081526002602090815260408220600190810180549182018155835291200161135a858261270f565b506113658484611d58565b6001600160a01b038083165f8181526002602081815260408084208301805460018181018355918652838620018890559589168085528185209093018054808801825590855282852001879055805160a0810182528a815280830193909352828101949094524260608301526080820194909452848252600790935220815181906113f0908261270f565b5060208201516001820180546001600160a01b03199081166001600160a01b039384161790915560408085015160028501805490931690841617909155606084015160038401556080909301516004909201805460ff191692151592909217909155905190841690611463908690612675565b604080519182900382206001600160a01b03861683524260208401529184917fb6bcd7cfdc4168ada92756b190a8bdac9989fd732a43601cccb64665ad20102d910160405180910390a460098054905f6114bc836128ac565b91905055506008846040516114d19190612675565b9081526040516020918190038201902080546001810182555f9182529190200155505050565b60076020525f90815260409020805481906115119061268b565b80601f016020809104026020016040519081016040528092919081815260200182805461153d9061268b565b80156115885780601f1061155f57610100808354040283529160200191611588565b820191905f5260205f20905b81548152906001019060200180831161156b57829003601f168201915b5050505060018301546002840154600385015460049095015493946001600160a01b03928316949290911692509060ff1685565b5f546001600160a01b031633146115d1575f80fd5b6001600160a01b03165f908152600460205260409020805460ff19166001179055565b8051602081830181018051600382529282019190930120915280546001820180546001600160a01b03909216929161162b9061268b565b80601f01602080910402602001604051908101604052809291908181526020018280546116579061268b565b80156116a25780601f10611679576101008083540402835291602001916116a2565b820191905f5260205f20905b81548152906001019060200180831161168557829003601f168201915b50505050600283015460038401546004850180549495929460ff9092169350906116cb9061268b565b80601f01602080910402602001604051908101604052809291908181526020018280546116f79061268b565b80156117425780601f1061171957610100808354040283529160200191611742565b820191905f5260205f20905b81548152906001019060200180831161172557829003601f168201915b5050505050908060050180546117579061268b565b80601f01602080910402602001604051908101604052809291908181526020018280546117839061268b565b80156117ce5780601f106117a5576101008083540402835291602001916117ce565b820191905f5260205f20905b8154815290600101906020018083116117b157829003601f168201915b5050505050908060060180546117e39061268b565b80601f016020809104026020016040519081016040528092919081815260200182805461180f9061268b565b801561185a5780601f106118315761010080835404028352916020019161185a565b820191905f5260205f20905b81548152906001019060200180831161183d57829003601f168201915b5050506007909301549192505060ff1688565b335f9081526002602052604090206003015460ff166118bc5760405162461bcd60e51b815260206004820152600b60248201526a34b9903737ba103ab9b2b960a91b6044820152606401610444565b6003836040516118cc9190612675565b9081526040519081900360200190206007015460ff16156119205760405162461bcd60e51b815260206004820152600e60248201526d6c616e642069732065786973747360901b6044820152606401610444565b604080516101008101825233815260208082018590525f828401819052606083018190528351808301855281815260808401528351808301855281815260a084015283519182018452815260c0820152600160e08201529051600390611987908690612675565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b039091161781559082015160018201906119c6908261270f565b5060408201516002820155606082015160038201805460ff1916911515919091179055608082015160048201906119fd908261270f565b5060a08201516005820190611a12908261270f565b5060c08201516006820190611a27908261270f565b5060e091909101516007909101805460ff19169115159190911790556040518190600390611a56908690612675565b90815260200160405180910390206004019081611a73919061270f565b50335f90815260026020908152604082206001908101805491820181558352912001611a9f848261270f565b506040513390611ab0908590612675565b60405180910390207f0db565b66bc7b7d853b058610a600e099197798649c0dfa27c11fd7a82ecab7184604051611ae791906128c4565b60405180910390a360068054905f611afe836128ac565b9190505550505050565b8133611b148282611cd5565b611b505760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081e5bdd5c881b185b99609a1b6044820152606401610444565b6001600160a01b0383163303611ba85760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74206265207472616e7366657272656420746f206f6e6573656c666044820152606401610444565b600384604051611bb89190612675565b9081526040519081900360200190206003015460ff16611c165760405162461bcd60e51b81526020600482015260196024820152781d1a1a5cc81b185b99081a5cc81b9bdd0815995c9a599a5959603a1b6044820152606401610444565b6001600160a01b0383165f9081526002602052604090206003015460ff16611c775760405162461bcd60e51b8152602060048201526014602482015273746f55736572206973206e6f742065786973747360601b6044820152606401610444565b6040513390611c87908690612675565b604080519182900382206001600160a01b0387168352426020840152917f5248c259bc895d2c422508ce73ea783fe4bda339c570eaf7f4c4fd5859b54b38910160405180910390a350505050565b6001600160a01b0381165f908152600260205260408120815b6001820154811015611d4c578480519060200120826001018281548110611d1757611d176128d6565b905f5260205f2001604051611d2c91906128ea565b604051809103902003611d4457600192505050611d52565b600101611cee565b505f9150505b92915050565b6001600160a01b0381165f908152600260205260408120905b6001820154811015611e47578380519060200120826001018281548110611d9a57611d9a6128d6565b905f5260205f2001604051611daf91906128ea565b604051809103902003611e3f57600180830180549091611dce9161295b565b81548110611dde57611dde6128d6565b905f5260205f2001826001018281548110611dfb57611dfb6128d6565b905f5260205f20019081611e0f919061296e565b5081600101805480611e2357611e23612a3a565b600190038181905f5260205f20015f611e3c9190611ee6565b90555b600101611d71565b50505050565b828054828255905f5260205f20908101928215611e91579160200282015b82811115611e915782518290611e81908261270f565b5091602001919060010190611e6b565b50611e9d929150611f20565b5090565b828054828255905f5260205f20908101928215611eda579160200282015b82811115611eda578251825591602001919060010190611ebf565b50611e9d929150611f3c565b508054611ef29061268b565b5f825580601f10611f01575050565b601f0160209004905f5260205f2090810190611f1d9190611f3c565b50565b80821115611e9d575f611f338282611ee6565b50600101611f20565b5b80821115611e9d575f8155600101611f3d565b80356001600160a01b0381168114611f66575f80fd5b919050565b5f60208284031215611f7b575f80fd5b611f8482611f50565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112611fae575f80fd5b81356001600160401b03811115611fc757611fc7611f8b565b604051601f8201601f19908116603f011681016001600160401b0381118282101715611ff557611ff5611f8b565b60405281815283820160200185101561200c575f80fd5b816020850160208301375f918101602001919091529392505050565b5f60208284031215612038575f80fd5b81356001600160401b0381111561204d575f80fd5b61205984828501611f9f565b949350505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081526120a96020820183516001600160a01b03169052565b5f602083015161010060408401526120c5610120840182612061565b90506040840151606084015260608401516120e4608085018215159052565b506080840151838203601f190160a08501526121008282612061565b91505060a0840151601f198483030160c085015261211e8282612061565b91505060c0840151601f198483030160e085015261213c8282612061565b91505060e084015161215361010085018215159052565b509392505050565b5f806040838503121561216c575f80fd5b61217583611f50565b915060208301356001600160401b0381111561218f575f80fd5b61219b85828601611f9f565b9150509250929050565b5f80604083850312156121b6575f80fd5b82356001600160401b038111156121cb575f80fd5b6121d785828601611f9f565b95602094909401359450505050565b5f602082840312156121f6575f80fd5b5035919050565b602081525f825160a0602084015261221860c0840182612061565b905060018060a01b03602085015116604084015260018060a01b036040850151166060840152606084015160808401526080840151151560a08401528091505092915050565b5f805f60608486031215612270575f80fd5b83356001600160401b03811115612285575f80fd5b61229186828701611f9f565b93505060208401356001600160401b038111156122ac575f80fd5b6122b886828701611f9f565b925050604084013580151581146122cd575f80fd5b809150509250925092565b604081525f6122ea6040830185612061565b905082151560208301529392505050565b602080825282518282018190525f918401906040840190835b81811015612332578351835260209384019390920191600101612314565b509095945050505050565b5f8151808452602084019350602083015f5b8281101561236d57815186526020958601959091019060010161234f565b5093949350505050565b602081525f82516080602084015261239260a0840182612061565b602085810151858303601f19016040870152805180845292935081019181840191600582901b8501015f5b828110156123ee57601f198683030184526123d9828651612061565b602095860195949094019391506001016123bd565b506040880151878203601f19016060890152945061240c818661233d565b9450505050506060840151612153608085018215159052565b5f805f60608486031215612437575f80fd5b83356001600160401b0381111561244c575f80fd5b61245886828701611f9f565b9350506020840135915060408401356001600160401b0381111561247a575f80fd5b61248686828701611f9f565b9150509250925092565b5f805f80608085870312156124a3575f80fd5b84356001600160401b038111156124b8575f80fd5b6124c487828801611f9f565b9450506124d360208601611f50565b92506124e160408601611f50565b9396929550929360600135925050565b60a081525f61250360a0830188612061565b6001600160a01b0396871660208401529490951660408201526060810192909252151560809091015292915050565b6001600160a01b0389168152610100602082018190525f906125569083018a612061565b886040840152871515606084015282810360808401526125768188612061565b905082810360a084015261258a8187612061565b905082810360c084015261259e8186612061565b91505082151560e08301529998505050505050505050565b5f805f606084860312156125c8575f80fd5b83356001600160401b038111156125dd575f80fd5b6125e986828701611f9f565b93505060208401356001600160401b03811115612604575f80fd5b61261086828701611f9f565b92505060408401356001600160401b0381111561247a575f80fd5b5f806040838503121561263c575f80fd5b82356001600160401b03811115612651575f80fd5b61265d85828601611f9f565b92505061266c60208401611f50565b90509250929050565b5f82518060208501845e5f920191825250919050565b600181811c9082168061269f57607f821691505b6020821081036126bd57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561270a57805f5260205f20601f840160051c810160208510156126e85750805b601f840160051c820191505b81811015612707575f81556001016126f4565b50505b505050565b81516001600160401b0381111561272857612728611f8b565b61273c81612736845461268b565b846126c3565b6020601f821160018114612771575f83156127575750848201515b600184901b5f19600386901b1c198216175b855550612707565b5f84815260208120601f198516915b828110156127a05787850151825560209485019460019092019101612780565b50848210156127bd57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f81546127d88161268b565b8085526001821680156127f2576001811461280e57612842565b60ff1983166020870152602082151560051b8701019350612842565b845f5260205f205f5b838110156128395781546020828a010152600182019150602081019050612817565b87016020019450505b50505092915050565b60a081525f61285d60a08301886127cc565b828103602084015261286f81886127cc565b905082810360408401526128838187612061565b94151560608401525050608001529392505050565b634e487b7160e01b5f52601160045260245ffd5b5f600182016128bd576128bd612898565b5060010190565b602081525f611f846020830184612061565b634e487b7160e01b5f52603260045260245ffd5b5f8083546128f78161268b565b60018216801561290e576001811461292357612950565b60ff1983168652811515820286019350612950565b865f5260205f205f5b838110156129485781548882015260019091019060200161292c565b505081860193505b509195945050505050565b81810381811115611d5257611d52612898565b818103612979575050565b612983825461268b565b6001600160401b0381111561299a5761299a611f8b565b6129a881612736845461268b565b5f601f8211600181146129d7575f8315612757575081850154600184901b5f19600386901b1c19821617612769565b5f8581526020808220868352908220601f198616925b83811015612a0d57828601548255600195860195909101906020016129ed565b5085831015612a2a57818501545f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52603160045260245ffdfea2646970667358221220ac224692fe2f0387c90cf0ffe87d6e1923c0a45d3fde80df2b5460c3ba18142b64736f6c634300081a0033",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend, _oracle common.Address) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend, _oracle)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// GetLandTransactionHistory is a free data retrieval call binding the contract method 0x51749d1e.
//
// Solidity: function getLandTransactionHistory(string _landId) view returns(uint256[])
func (_Contract *ContractCaller) GetLandTransactionHistory(opts *bind.CallOpts, _landId string) ([]*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getLandTransactionHistory", _landId)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetLandTransactionHistory is a free data retrieval call binding the contract method 0x51749d1e.
//
// Solidity: function getLandTransactionHistory(string _landId) view returns(uint256[])
func (_Contract *ContractSession) GetLandTransactionHistory(_landId string) ([]*big.Int, error) {
	return _Contract.Contract.GetLandTransactionHistory(&_Contract.CallOpts, _landId)
}

// GetLandTransactionHistory is a free data retrieval call binding the contract method 0x51749d1e.
//
// Solidity: function getLandTransactionHistory(string _landId) view returns(uint256[])
func (_Contract *ContractCallerSession) GetLandTransactionHistory(_landId string) ([]*big.Int, error) {
	return _Contract.Contract.GetLandTransactionHistory(&_Contract.CallOpts, _landId)
}

// GetTransactionDetails is a free data retrieval call binding the contract method 0x0fa683d3.
//
// Solidity: function getTransactionDetails(uint256 _transactionId) view returns((string,address,address,uint256,bool))
func (_Contract *ContractCaller) GetTransactionDetails(opts *bind.CallOpts, _transactionId *big.Int) (LandTransactionTransaction, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getTransactionDetails", _transactionId)

	if err != nil {
		return *new(LandTransactionTransaction), err
	}

	out0 := *abi.ConvertType(out[0], new(LandTransactionTransaction)).(*LandTransactionTransaction)

	return out0, err

}

// GetTransactionDetails is a free data retrieval call binding the contract method 0x0fa683d3.
//
// Solidity: function getTransactionDetails(uint256 _transactionId) view returns((string,address,address,uint256,bool))
func (_Contract *ContractSession) GetTransactionDetails(_transactionId *big.Int) (LandTransactionTransaction, error) {
	return _Contract.Contract.GetTransactionDetails(&_Contract.CallOpts, _transactionId)
}

// GetTransactionDetails is a free data retrieval call binding the contract method 0x0fa683d3.
//
// Solidity: function getTransactionDetails(uint256 _transactionId) view returns((string,address,address,uint256,bool))
func (_Contract *ContractCallerSession) GetTransactionDetails(_transactionId *big.Int) (LandTransactionTransaction, error) {
	return _Contract.Contract.GetTransactionDetails(&_Contract.CallOpts, _transactionId)
}

// Lands is a free data retrieval call binding the contract method 0xb1c8ad0d.
//
// Solidity: function lands(string ) view returns(address owner, string location, uint256 area, bool isVerified, string detailsHash, string reportHash, string documentsHash, bool isVaild)
func (_Contract *ContractCaller) Lands(opts *bind.CallOpts, arg0 string) (struct {
	Owner         common.Address
	Location      string
	Area          *big.Int
	IsVerified    bool
	DetailsHash   string
	ReportHash    string
	DocumentsHash string
	IsVaild       bool
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "lands", arg0)

	outstruct := new(struct {
		Owner         common.Address
		Location      string
		Area          *big.Int
		IsVerified    bool
		DetailsHash   string
		ReportHash    string
		DocumentsHash string
		IsVaild       bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Location = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Area = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.IsVerified = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.DetailsHash = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.ReportHash = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.DocumentsHash = *abi.ConvertType(out[6], new(string)).(*string)
	outstruct.IsVaild = *abi.ConvertType(out[7], new(bool)).(*bool)

	return *outstruct, err

}

// Lands is a free data retrieval call binding the contract method 0xb1c8ad0d.
//
// Solidity: function lands(string ) view returns(address owner, string location, uint256 area, bool isVerified, string detailsHash, string reportHash, string documentsHash, bool isVaild)
func (_Contract *ContractSession) Lands(arg0 string) (struct {
	Owner         common.Address
	Location      string
	Area          *big.Int
	IsVerified    bool
	DetailsHash   string
	ReportHash    string
	DocumentsHash string
	IsVaild       bool
}, error) {
	return _Contract.Contract.Lands(&_Contract.CallOpts, arg0)
}

// Lands is a free data retrieval call binding the contract method 0xb1c8ad0d.
//
// Solidity: function lands(string ) view returns(address owner, string location, uint256 area, bool isVerified, string detailsHash, string reportHash, string documentsHash, bool isVaild)
func (_Contract *ContractCallerSession) Lands(arg0 string) (struct {
	Owner         common.Address
	Location      string
	Area          *big.Int
	IsVerified    bool
	DetailsHash   string
	ReportHash    string
	DocumentsHash string
	IsVaild       bool
}, error) {
	return _Contract.Contract.Lands(&_Contract.CallOpts, arg0)
}

// LandsTransactionIdList is a free data retrieval call binding the contract method 0x0ee4f079.
//
// Solidity: function landsTransactionIdList(string , uint256 ) view returns(uint256)
func (_Contract *ContractCaller) LandsTransactionIdList(opts *bind.CallOpts, arg0 string, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "landsTransactionIdList", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LandsTransactionIdList is a free data retrieval call binding the contract method 0x0ee4f079.
//
// Solidity: function landsTransactionIdList(string , uint256 ) view returns(uint256)
func (_Contract *ContractSession) LandsTransactionIdList(arg0 string, arg1 *big.Int) (*big.Int, error) {
	return _Contract.Contract.LandsTransactionIdList(&_Contract.CallOpts, arg0, arg1)
}

// LandsTransactionIdList is a free data retrieval call binding the contract method 0x0ee4f079.
//
// Solidity: function landsTransactionIdList(string , uint256 ) view returns(uint256)
func (_Contract *ContractCallerSession) LandsTransactionIdList(arg0 string, arg1 *big.Int) (*big.Int, error) {
	return _Contract.Contract.LandsTransactionIdList(&_Contract.CallOpts, arg0, arg1)
}

// Notaries is a free data retrieval call binding the contract method 0x00e168f0.
//
// Solidity: function notaries(address ) view returns(bool)
func (_Contract *ContractCaller) Notaries(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "notaries", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Notaries is a free data retrieval call binding the contract method 0x00e168f0.
//
// Solidity: function notaries(address ) view returns(bool)
func (_Contract *ContractSession) Notaries(arg0 common.Address) (bool, error) {
	return _Contract.Contract.Notaries(&_Contract.CallOpts, arg0)
}

// Notaries is a free data retrieval call binding the contract method 0x00e168f0.
//
// Solidity: function notaries(address ) view returns(bool)
func (_Contract *ContractCallerSession) Notaries(arg0 common.Address) (bool, error) {
	return _Contract.Contract.Notaries(&_Contract.CallOpts, arg0)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_Contract *ContractCaller) Oracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "oracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_Contract *ContractSession) Oracle() (common.Address, error) {
	return _Contract.Contract.Oracle(&_Contract.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_Contract *ContractCallerSession) Oracle() (common.Address, error) {
	return _Contract.Contract.Oracle(&_Contract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCallerSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// QueryLand is a free data retrieval call binding the contract method 0x019a1565.
//
// Solidity: function queryLand(string landId) view returns((address,string,uint256,bool,string,string,string,bool))
func (_Contract *ContractCaller) QueryLand(opts *bind.CallOpts, landId string) (LandRegistryLand, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "queryLand", landId)

	if err != nil {
		return *new(LandRegistryLand), err
	}

	out0 := *abi.ConvertType(out[0], new(LandRegistryLand)).(*LandRegistryLand)

	return out0, err

}

// QueryLand is a free data retrieval call binding the contract method 0x019a1565.
//
// Solidity: function queryLand(string landId) view returns((address,string,uint256,bool,string,string,string,bool))
func (_Contract *ContractSession) QueryLand(landId string) (LandRegistryLand, error) {
	return _Contract.Contract.QueryLand(&_Contract.CallOpts, landId)
}

// QueryLand is a free data retrieval call binding the contract method 0x019a1565.
//
// Solidity: function queryLand(string landId) view returns((address,string,uint256,bool,string,string,string,bool))
func (_Contract *ContractCallerSession) QueryLand(landId string) (LandRegistryLand, error) {
	return _Contract.Contract.QueryLand(&_Contract.CallOpts, landId)
}

// QueryUserInfo is a free data retrieval call binding the contract method 0x5307d396.
//
// Solidity: function queryUserInfo() view returns((string,string[],uint256[],bool))
func (_Contract *ContractCaller) QueryUserInfo(opts *bind.CallOpts) (LandRegistryUser, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "queryUserInfo")

	if err != nil {
		return *new(LandRegistryUser), err
	}

	out0 := *abi.ConvertType(out[0], new(LandRegistryUser)).(*LandRegistryUser)

	return out0, err

}

// QueryUserInfo is a free data retrieval call binding the contract method 0x5307d396.
//
// Solidity: function queryUserInfo() view returns((string,string[],uint256[],bool))
func (_Contract *ContractSession) QueryUserInfo() (LandRegistryUser, error) {
	return _Contract.Contract.QueryUserInfo(&_Contract.CallOpts)
}

// QueryUserInfo is a free data retrieval call binding the contract method 0x5307d396.
//
// Solidity: function queryUserInfo() view returns((string,string[],uint256[],bool))
func (_Contract *ContractCallerSession) QueryUserInfo() (LandRegistryUser, error) {
	return _Contract.Contract.QueryUserInfo(&_Contract.CallOpts)
}

// Surveyors is a free data retrieval call binding the contract method 0x87b6963f.
//
// Solidity: function surveyors(address ) view returns(bool)
func (_Contract *ContractCaller) Surveyors(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "surveyors", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Surveyors is a free data retrieval call binding the contract method 0x87b6963f.
//
// Solidity: function surveyors(address ) view returns(bool)
func (_Contract *ContractSession) Surveyors(arg0 common.Address) (bool, error) {
	return _Contract.Contract.Surveyors(&_Contract.CallOpts, arg0)
}

// Surveyors is a free data retrieval call binding the contract method 0x87b6963f.
//
// Solidity: function surveyors(address ) view returns(bool)
func (_Contract *ContractCallerSession) Surveyors(arg0 common.Address) (bool, error) {
	return _Contract.Contract.Surveyors(&_Contract.CallOpts, arg0)
}

// TransactionCounter is a free data retrieval call binding the contract method 0x14e887e8.
//
// Solidity: function transactionCounter() view returns(uint256)
func (_Contract *ContractCaller) TransactionCounter(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "transactionCounter")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TransactionCounter is a free data retrieval call binding the contract method 0x14e887e8.
//
// Solidity: function transactionCounter() view returns(uint256)
func (_Contract *ContractSession) TransactionCounter() (*big.Int, error) {
	return _Contract.Contract.TransactionCounter(&_Contract.CallOpts)
}

// TransactionCounter is a free data retrieval call binding the contract method 0x14e887e8.
//
// Solidity: function transactionCounter() view returns(uint256)
func (_Contract *ContractCallerSession) TransactionCounter() (*big.Int, error) {
	return _Contract.Contract.TransactionCounter(&_Contract.CallOpts)
}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(string landId, address from, address to, uint256 timestamp, bool isVaild)
func (_Contract *ContractCaller) Transactions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	LandId    string
	From      common.Address
	To        common.Address
	Timestamp *big.Int
	IsVaild   bool
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "transactions", arg0)

	outstruct := new(struct {
		LandId    string
		From      common.Address
		To        common.Address
		Timestamp *big.Int
		IsVaild   bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.LandId = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.From = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.To = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Timestamp = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.IsVaild = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(string landId, address from, address to, uint256 timestamp, bool isVaild)
func (_Contract *ContractSession) Transactions(arg0 *big.Int) (struct {
	LandId    string
	From      common.Address
	To        common.Address
	Timestamp *big.Int
	IsVaild   bool
}, error) {
	return _Contract.Contract.Transactions(&_Contract.CallOpts, arg0)
}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(string landId, address from, address to, uint256 timestamp, bool isVaild)
func (_Contract *ContractCallerSession) Transactions(arg0 *big.Int) (struct {
	LandId    string
	From      common.Address
	To        common.Address
	Timestamp *big.Int
	IsVaild   bool
}, error) {
	return _Contract.Contract.Transactions(&_Contract.CallOpts, arg0)
}

// UserMapping is a free data retrieval call binding the contract method 0x118b9535.
//
// Solidity: function userMapping(address ) view returns(string username, bool isVaild)
func (_Contract *ContractCaller) UserMapping(opts *bind.CallOpts, arg0 common.Address) (struct {
	Username string
	IsVaild  bool
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "userMapping", arg0)

	outstruct := new(struct {
		Username string
		IsVaild  bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Username = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.IsVaild = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// UserMapping is a free data retrieval call binding the contract method 0x118b9535.
//
// Solidity: function userMapping(address ) view returns(string username, bool isVaild)
func (_Contract *ContractSession) UserMapping(arg0 common.Address) (struct {
	Username string
	IsVaild  bool
}, error) {
	return _Contract.Contract.UserMapping(&_Contract.CallOpts, arg0)
}

// UserMapping is a free data retrieval call binding the contract method 0x118b9535.
//
// Solidity: function userMapping(address ) view returns(string username, bool isVaild)
func (_Contract *ContractCallerSession) UserMapping(arg0 common.Address) (struct {
	Username string
	IsVaild  bool
}, error) {
	return _Contract.Contract.UserMapping(&_Contract.CallOpts, arg0)
}

// LandSurveyingArea is a paid mutator transaction binding the contract method 0x6af6909d.
//
// Solidity: function LandSurveyingArea(string _landId, uint256 _area, string _reportHash) returns()
func (_Contract *ContractTransactor) LandSurveyingArea(opts *bind.TransactOpts, _landId string, _area *big.Int, _reportHash string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "LandSurveyingArea", _landId, _area, _reportHash)
}

// LandSurveyingArea is a paid mutator transaction binding the contract method 0x6af6909d.
//
// Solidity: function LandSurveyingArea(string _landId, uint256 _area, string _reportHash) returns()
func (_Contract *ContractSession) LandSurveyingArea(_landId string, _area *big.Int, _reportHash string) (*types.Transaction, error) {
	return _Contract.Contract.LandSurveyingArea(&_Contract.TransactOpts, _landId, _area, _reportHash)
}

// LandSurveyingArea is a paid mutator transaction binding the contract method 0x6af6909d.
//
// Solidity: function LandSurveyingArea(string _landId, uint256 _area, string _reportHash) returns()
func (_Contract *ContractTransactorSession) LandSurveyingArea(_landId string, _area *big.Int, _reportHash string) (*types.Transaction, error) {
	return _Contract.Contract.LandSurveyingArea(&_Contract.TransactOpts, _landId, _area, _reportHash)
}

// AddNotary is a paid mutator transaction binding the contract method 0x0588565f.
//
// Solidity: function addNotary(address _notary) returns()
func (_Contract *ContractTransactor) AddNotary(opts *bind.TransactOpts, _notary common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "addNotary", _notary)
}

// AddNotary is a paid mutator transaction binding the contract method 0x0588565f.
//
// Solidity: function addNotary(address _notary) returns()
func (_Contract *ContractSession) AddNotary(_notary common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddNotary(&_Contract.TransactOpts, _notary)
}

// AddNotary is a paid mutator transaction binding the contract method 0x0588565f.
//
// Solidity: function addNotary(address _notary) returns()
func (_Contract *ContractTransactorSession) AddNotary(_notary common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddNotary(&_Contract.TransactOpts, _notary)
}

// AddSurveyor is a paid mutator transaction binding the contract method 0xad812a52.
//
// Solidity: function addSurveyor(address _surveyor) returns()
func (_Contract *ContractTransactor) AddSurveyor(opts *bind.TransactOpts, _surveyor common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "addSurveyor", _surveyor)
}

// AddSurveyor is a paid mutator transaction binding the contract method 0xad812a52.
//
// Solidity: function addSurveyor(address _surveyor) returns()
func (_Contract *ContractSession) AddSurveyor(_surveyor common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddSurveyor(&_Contract.TransactOpts, _surveyor)
}

// AddSurveyor is a paid mutator transaction binding the contract method 0xad812a52.
//
// Solidity: function addSurveyor(address _surveyor) returns()
func (_Contract *ContractTransactorSession) AddSurveyor(_surveyor common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddSurveyor(&_Contract.TransactOpts, _surveyor)
}

// RegisterLand is a paid mutator transaction binding the contract method 0xb829c12a.
//
// Solidity: function registerLand(string _landId, string _location, string _detailsHash) returns()
func (_Contract *ContractTransactor) RegisterLand(opts *bind.TransactOpts, _landId string, _location string, _detailsHash string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "registerLand", _landId, _location, _detailsHash)
}

// RegisterLand is a paid mutator transaction binding the contract method 0xb829c12a.
//
// Solidity: function registerLand(string _landId, string _location, string _detailsHash) returns()
func (_Contract *ContractSession) RegisterLand(_landId string, _location string, _detailsHash string) (*types.Transaction, error) {
	return _Contract.Contract.RegisterLand(&_Contract.TransactOpts, _landId, _location, _detailsHash)
}

// RegisterLand is a paid mutator transaction binding the contract method 0xb829c12a.
//
// Solidity: function registerLand(string _landId, string _location, string _detailsHash) returns()
func (_Contract *ContractTransactorSession) RegisterLand(_landId string, _location string, _detailsHash string) (*types.Transaction, error) {
	return _Contract.Contract.RegisterLand(&_Contract.TransactOpts, _landId, _location, _detailsHash)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x0ea126f9.
//
// Solidity: function registerUser(address _userAddress, string _userName) returns()
func (_Contract *ContractTransactor) RegisterUser(opts *bind.TransactOpts, _userAddress common.Address, _userName string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "registerUser", _userAddress, _userName)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x0ea126f9.
//
// Solidity: function registerUser(address _userAddress, string _userName) returns()
func (_Contract *ContractSession) RegisterUser(_userAddress common.Address, _userName string) (*types.Transaction, error) {
	return _Contract.Contract.RegisterUser(&_Contract.TransactOpts, _userAddress, _userName)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x0ea126f9.
//
// Solidity: function registerUser(address _userAddress, string _userName) returns()
func (_Contract *ContractTransactorSession) RegisterUser(_userAddress common.Address, _userName string) (*types.Transaction, error) {
	return _Contract.Contract.RegisterUser(&_Contract.TransactOpts, _userAddress, _userName)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(address newOwner) returns()
func (_Contract *ContractTransactor) TransferOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferOwner", newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(address newOwner) returns()
func (_Contract *ContractSession) TransferOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwner(&_Contract.TransactOpts, newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(address newOwner) returns()
func (_Contract *ContractTransactorSession) TransferOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwner(&_Contract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xc0e793c2.
//
// Solidity: function transferOwnership(string _landId, address _to) returns()
func (_Contract *ContractTransactor) TransferOwnership(opts *bind.TransactOpts, _landId string, _to common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferOwnership", _landId, _to)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xc0e793c2.
//
// Solidity: function transferOwnership(string _landId, address _to) returns()
func (_Contract *ContractSession) TransferOwnership(_landId string, _to common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, _landId, _to)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xc0e793c2.
//
// Solidity: function transferOwnership(string _landId, address _to) returns()
func (_Contract *ContractTransactorSession) TransferOwnership(_landId string, _to common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, _landId, _to)
}

// TransferVerify is a paid mutator transaction binding the contract method 0x91383192.
//
// Solidity: function transferVerify(string _landId, address _from, address _to, uint256 _transactionId) returns()
func (_Contract *ContractTransactor) TransferVerify(opts *bind.TransactOpts, _landId string, _from common.Address, _to common.Address, _transactionId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferVerify", _landId, _from, _to, _transactionId)
}

// TransferVerify is a paid mutator transaction binding the contract method 0x91383192.
//
// Solidity: function transferVerify(string _landId, address _from, address _to, uint256 _transactionId) returns()
func (_Contract *ContractSession) TransferVerify(_landId string, _from common.Address, _to common.Address, _transactionId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferVerify(&_Contract.TransactOpts, _landId, _from, _to, _transactionId)
}

// TransferVerify is a paid mutator transaction binding the contract method 0x91383192.
//
// Solidity: function transferVerify(string _landId, address _from, address _to, uint256 _transactionId) returns()
func (_Contract *ContractTransactorSession) TransferVerify(_landId string, _from common.Address, _to common.Address, _transactionId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferVerify(&_Contract.TransactOpts, _landId, _from, _to, _transactionId)
}

// VerifyLand is a paid mutator transaction binding the contract method 0x101dd0eb.
//
// Solidity: function verifyLand(string _landId, string _documentsHash, bool _isVerified) returns()
func (_Contract *ContractTransactor) VerifyLand(opts *bind.TransactOpts, _landId string, _documentsHash string, _isVerified bool) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "verifyLand", _landId, _documentsHash, _isVerified)
}

// VerifyLand is a paid mutator transaction binding the contract method 0x101dd0eb.
//
// Solidity: function verifyLand(string _landId, string _documentsHash, bool _isVerified) returns()
func (_Contract *ContractSession) VerifyLand(_landId string, _documentsHash string, _isVerified bool) (*types.Transaction, error) {
	return _Contract.Contract.VerifyLand(&_Contract.TransactOpts, _landId, _documentsHash, _isVerified)
}

// VerifyLand is a paid mutator transaction binding the contract method 0x101dd0eb.
//
// Solidity: function verifyLand(string _landId, string _documentsHash, bool _isVerified) returns()
func (_Contract *ContractTransactorSession) VerifyLand(_landId string, _documentsHash string, _isVerified bool) (*types.Transaction, error) {
	return _Contract.Contract.VerifyLand(&_Contract.TransactOpts, _landId, _documentsHash, _isVerified)
}

// ContractInitiateTransactionIterator is returned from FilterInitiateTransaction and is used to iterate over the raw logs and unpacked data for InitiateTransaction events raised by the Contract contract.
type ContractInitiateTransactionIterator struct {
	Event *ContractInitiateTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractInitiateTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractInitiateTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractInitiateTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractInitiateTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractInitiateTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractInitiateTransaction represents a InitiateTransaction event raised by the Contract contract.
type ContractInitiateTransaction struct {
	LandId    common.Hash
	From      common.Address
	To        common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInitiateTransaction is a free log retrieval operation binding the contract event 0x5248c259bc895d2c422508ce73ea783fe4bda339c570eaf7f4c4fd5859b54b38.
//
// Solidity: event InitiateTransaction(string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) FilterInitiateTransaction(opts *bind.FilterOpts, landId []string, from []common.Address) (*ContractInitiateTransactionIterator, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "InitiateTransaction", landIdRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &ContractInitiateTransactionIterator{contract: _Contract.contract, event: "InitiateTransaction", logs: logs, sub: sub}, nil
}

// WatchInitiateTransaction is a free log subscription operation binding the contract event 0x5248c259bc895d2c422508ce73ea783fe4bda339c570eaf7f4c4fd5859b54b38.
//
// Solidity: event InitiateTransaction(string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) WatchInitiateTransaction(opts *bind.WatchOpts, sink chan<- *ContractInitiateTransaction, landId []string, from []common.Address) (event.Subscription, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "InitiateTransaction", landIdRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractInitiateTransaction)
				if err := _Contract.contract.UnpackLog(event, "InitiateTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiateTransaction is a log parse operation binding the contract event 0x5248c259bc895d2c422508ce73ea783fe4bda339c570eaf7f4c4fd5859b54b38.
//
// Solidity: event InitiateTransaction(string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) ParseInitiateTransaction(log types.Log) (*ContractInitiateTransaction, error) {
	event := new(ContractInitiateTransaction)
	if err := _Contract.contract.UnpackLog(event, "InitiateTransaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractLandRegisteredIterator is returned from FilterLandRegistered and is used to iterate over the raw logs and unpacked data for LandRegistered events raised by the Contract contract.
type ContractLandRegisteredIterator struct {
	Event *ContractLandRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractLandRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractLandRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractLandRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractLandRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractLandRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractLandRegistered represents a LandRegistered event raised by the Contract contract.
type ContractLandRegistered struct {
	LandId   common.Hash
	Owner    common.Address
	Location string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLandRegistered is a free log retrieval operation binding the contract event 0x0db565b66bc7b7d853b058610a600e099197798649c0dfa27c11fd7a82ecab71.
//
// Solidity: event LandRegistered(string indexed landId, address indexed owner, string location)
func (_Contract *ContractFilterer) FilterLandRegistered(opts *bind.FilterOpts, landId []string, owner []common.Address) (*ContractLandRegisteredIterator, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "LandRegistered", landIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &ContractLandRegisteredIterator{contract: _Contract.contract, event: "LandRegistered", logs: logs, sub: sub}, nil
}

// WatchLandRegistered is a free log subscription operation binding the contract event 0x0db565b66bc7b7d853b058610a600e099197798649c0dfa27c11fd7a82ecab71.
//
// Solidity: event LandRegistered(string indexed landId, address indexed owner, string location)
func (_Contract *ContractFilterer) WatchLandRegistered(opts *bind.WatchOpts, sink chan<- *ContractLandRegistered, landId []string, owner []common.Address) (event.Subscription, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "LandRegistered", landIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractLandRegistered)
				if err := _Contract.contract.UnpackLog(event, "LandRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLandRegistered is a log parse operation binding the contract event 0x0db565b66bc7b7d853b058610a600e099197798649c0dfa27c11fd7a82ecab71.
//
// Solidity: event LandRegistered(string indexed landId, address indexed owner, string location)
func (_Contract *ContractFilterer) ParseLandRegistered(log types.Log) (*ContractLandRegistered, error) {
	event := new(ContractLandRegistered)
	if err := _Contract.contract.UnpackLog(event, "LandRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractLandSurveyingIterator is returned from FilterLandSurveying and is used to iterate over the raw logs and unpacked data for LandSurveying events raised by the Contract contract.
type ContractLandSurveyingIterator struct {
	Event *ContractLandSurveying // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractLandSurveyingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractLandSurveying)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractLandSurveying)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractLandSurveyingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractLandSurveyingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractLandSurveying represents a LandSurveying event raised by the Contract contract.
type ContractLandSurveying struct {
	LandId           common.Hash
	Area             *big.Int
	SurveyorsAddress common.Address
	Timestam         *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLandSurveying is a free log retrieval operation binding the contract event 0xc200ae8df18b7f538d348a1b0a8fb6b591cabace3b6c1b309e0cec7253093042.
//
// Solidity: event LandSurveying(string indexed landId, uint256 area, address indexed surveyorsAddress, uint256 timestam)
func (_Contract *ContractFilterer) FilterLandSurveying(opts *bind.FilterOpts, landId []string, surveyorsAddress []common.Address) (*ContractLandSurveyingIterator, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}

	var surveyorsAddressRule []interface{}
	for _, surveyorsAddressItem := range surveyorsAddress {
		surveyorsAddressRule = append(surveyorsAddressRule, surveyorsAddressItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "LandSurveying", landIdRule, surveyorsAddressRule)
	if err != nil {
		return nil, err
	}
	return &ContractLandSurveyingIterator{contract: _Contract.contract, event: "LandSurveying", logs: logs, sub: sub}, nil
}

// WatchLandSurveying is a free log subscription operation binding the contract event 0xc200ae8df18b7f538d348a1b0a8fb6b591cabace3b6c1b309e0cec7253093042.
//
// Solidity: event LandSurveying(string indexed landId, uint256 area, address indexed surveyorsAddress, uint256 timestam)
func (_Contract *ContractFilterer) WatchLandSurveying(opts *bind.WatchOpts, sink chan<- *ContractLandSurveying, landId []string, surveyorsAddress []common.Address) (event.Subscription, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}

	var surveyorsAddressRule []interface{}
	for _, surveyorsAddressItem := range surveyorsAddress {
		surveyorsAddressRule = append(surveyorsAddressRule, surveyorsAddressItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "LandSurveying", landIdRule, surveyorsAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractLandSurveying)
				if err := _Contract.contract.UnpackLog(event, "LandSurveying", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLandSurveying is a log parse operation binding the contract event 0xc200ae8df18b7f538d348a1b0a8fb6b591cabace3b6c1b309e0cec7253093042.
//
// Solidity: event LandSurveying(string indexed landId, uint256 area, address indexed surveyorsAddress, uint256 timestam)
func (_Contract *ContractFilterer) ParseLandSurveying(log types.Log) (*ContractLandSurveying, error) {
	event := new(ContractLandSurveying)
	if err := _Contract.contract.UnpackLog(event, "LandSurveying", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractLandVerifiedIterator is returned from FilterLandVerified and is used to iterate over the raw logs and unpacked data for LandVerified events raised by the Contract contract.
type ContractLandVerifiedIterator struct {
	Event *ContractLandVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractLandVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractLandVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractLandVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractLandVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractLandVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractLandVerified represents a LandVerified event raised by the Contract contract.
type ContractLandVerified struct {
	LandId          common.Hash
	DetailsHash     string
	ReportHash      string
	DocumentsHash   string
	IsVerified      bool
	NotariesAddress common.Address
	Timestamp       *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterLandVerified is a free log retrieval operation binding the contract event 0x02c254bec0795f97886c74722bdf7fae93289967a7e3fb099a88c723f17f3955.
//
// Solidity: event LandVerified(string indexed landId, string detailsHash, string reportHash, string documentsHash, bool isVerified, address indexed notariesAddress, uint256 timestamp)
func (_Contract *ContractFilterer) FilterLandVerified(opts *bind.FilterOpts, landId []string, notariesAddress []common.Address) (*ContractLandVerifiedIterator, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}

	var notariesAddressRule []interface{}
	for _, notariesAddressItem := range notariesAddress {
		notariesAddressRule = append(notariesAddressRule, notariesAddressItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "LandVerified", landIdRule, notariesAddressRule)
	if err != nil {
		return nil, err
	}
	return &ContractLandVerifiedIterator{contract: _Contract.contract, event: "LandVerified", logs: logs, sub: sub}, nil
}

// WatchLandVerified is a free log subscription operation binding the contract event 0x02c254bec0795f97886c74722bdf7fae93289967a7e3fb099a88c723f17f3955.
//
// Solidity: event LandVerified(string indexed landId, string detailsHash, string reportHash, string documentsHash, bool isVerified, address indexed notariesAddress, uint256 timestamp)
func (_Contract *ContractFilterer) WatchLandVerified(opts *bind.WatchOpts, sink chan<- *ContractLandVerified, landId []string, notariesAddress []common.Address) (event.Subscription, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}

	var notariesAddressRule []interface{}
	for _, notariesAddressItem := range notariesAddress {
		notariesAddressRule = append(notariesAddressRule, notariesAddressItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "LandVerified", landIdRule, notariesAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractLandVerified)
				if err := _Contract.contract.UnpackLog(event, "LandVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLandVerified is a log parse operation binding the contract event 0x02c254bec0795f97886c74722bdf7fae93289967a7e3fb099a88c723f17f3955.
//
// Solidity: event LandVerified(string indexed landId, string detailsHash, string reportHash, string documentsHash, bool isVerified, address indexed notariesAddress, uint256 timestamp)
func (_Contract *ContractFilterer) ParseLandVerified(log types.Log) (*ContractLandVerified, error) {
	event := new(ContractLandVerified)
	if err := _Contract.contract.UnpackLog(event, "LandVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Contract contract.
type ContractOwnershipTransferredIterator struct {
	Event *ContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractOwnershipTransferred represents a OwnershipTransferred event raised by the Contract contract.
type ContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractOwnershipTransferredIterator{contract: _Contract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractOwnershipTransferred)
				if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) ParseOwnershipTransferred(log types.Log) (*ContractOwnershipTransferred, error) {
	event := new(ContractOwnershipTransferred)
	if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTransactionRecordedIterator is returned from FilterTransactionRecorded and is used to iterate over the raw logs and unpacked data for TransactionRecorded events raised by the Contract contract.
type ContractTransactionRecordedIterator struct {
	Event *ContractTransactionRecorded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTransactionRecordedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTransactionRecorded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTransactionRecorded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTransactionRecordedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTransactionRecordedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTransactionRecorded represents a TransactionRecorded event raised by the Contract contract.
type ContractTransactionRecorded struct {
	TransactionId *big.Int
	LandId        common.Hash
	From          common.Address
	To            common.Address
	Timestamp     *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterTransactionRecorded is a free log retrieval operation binding the contract event 0xb6bcd7cfdc4168ada92756b190a8bdac9989fd732a43601cccb64665ad20102d.
//
// Solidity: event TransactionRecorded(uint256 indexed transactionId, string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) FilterTransactionRecorded(opts *bind.FilterOpts, transactionId []*big.Int, landId []string, from []common.Address) (*ContractTransactionRecordedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "TransactionRecorded", transactionIdRule, landIdRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &ContractTransactionRecordedIterator{contract: _Contract.contract, event: "TransactionRecorded", logs: logs, sub: sub}, nil
}

// WatchTransactionRecorded is a free log subscription operation binding the contract event 0xb6bcd7cfdc4168ada92756b190a8bdac9989fd732a43601cccb64665ad20102d.
//
// Solidity: event TransactionRecorded(uint256 indexed transactionId, string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) WatchTransactionRecorded(opts *bind.WatchOpts, sink chan<- *ContractTransactionRecorded, transactionId []*big.Int, landId []string, from []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "TransactionRecorded", transactionIdRule, landIdRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTransactionRecorded)
				if err := _Contract.contract.UnpackLog(event, "TransactionRecorded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionRecorded is a log parse operation binding the contract event 0xb6bcd7cfdc4168ada92756b190a8bdac9989fd732a43601cccb64665ad20102d.
//
// Solidity: event TransactionRecorded(uint256 indexed transactionId, string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) ParseTransactionRecorded(log types.Log) (*ContractTransactionRecorded, error) {
	event := new(ContractTransactionRecorded)
	if err := _Contract.contract.UnpackLog(event, "TransactionRecorded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
