// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// LandRegistryLand is an auto generated low-level Go binding around an user-defined struct.
type LandRegistryLand struct {
	Owner         common.Address
	Location      string
	Area          *big.Int
	IsVerified    bool
	DetailsHash   string
	ReportHash    string
	DocumentsHash string
	IsVaild       bool
}

// LandRegistryUser is an auto generated low-level Go binding around an user-defined struct.
type LandRegistryUser struct {
	Username          string
	LandIdList        []string
	TransactionIdList []*big.Int
	IsVaild           bool
}

// LandTransactionTransaction is an auto generated low-level Go binding around an user-defined struct.
type LandTransactionTransaction struct {
	LandId    string
	From      common.Address
	To        common.Address
	Timestamp *big.Int
	IsVaild   bool
}

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InitiateTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"LandRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"surveyorsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestam\",\"type\":\"uint256\"}],\"name\":\"LandSurveying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"detailsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reportHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"documentsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"notariesAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LandVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransactionRecorded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_area\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reportHash\",\"type\":\"string\"}],\"name\":\"LandSurveyingArea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_notary\",\"type\":\"address\"}],\"name\":\"addNotary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_surveyor\",\"type\":\"address\"}],\"name\":\"addSurveyor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"}],\"name\":\"getLandTransactionHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"getTransactionDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"internalType\":\"structLandTransaction.Transaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lands\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"detailsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reportHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landsTransactionIdList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notaries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"}],\"name\":\"queryLand\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"detailsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reportHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"internalType\":\"structLandRegistry.Land\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"landIdList\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"transactionIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"internalType\":\"structLandRegistry.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_detailsHash\",\"type\":\"string\"}],\"name\":\"registerLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_userName\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"surveyors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"landId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"transferVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMapping\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isVaild\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_landId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_documentsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isVerified\",\"type\":\"bool\"}],\"name\":\"verifyLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260006006553480156200001657600080fd5b5060405162002b6438038062002b6483398101604081905262000039916200006d565b600080546001600160a01b03199081163317909155600180546001600160a01b03909316929091169190911790556200009d565b6000602082840312156200007f578081fd5b81516001600160a01b038116811462000096578182fd5b9392505050565b612ab780620000ad6000396000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c80635307d396116100b8578063913831921161007c57806391383192146103005780639ace38c214610313578063ad812a5214610337578063b1c8ad0d1461034a578063b829c12a14610371578063c0e793c21461038457610141565b80635307d396146102775780636af6909d1461028c5780637dc0d1d01461029f57806387b6963f146102ca5780638da5cb5b146102ed57610141565b80630fa683d31161010a5780630fa683d3146101e7578063101dd0eb14610207578063118b95351461021a57806314e887e81461023b5780634fb2e45d1461024457806351749d1e1461025757610141565b8062e168f014610146578063019a15651461017e5780630588565f1461019e5780630ea126f9146101b35780630ee4f079146101c6575b600080fd5b610169610154366004612211565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61019161018c36600461227e565b610397565b60405161017591906127dd565b6101b16101ac366004612211565b610712565b005b6101b16101c1366004612232565b61074d565b6101d96101d4366004612466565b6108b9565b604051908152602001610175565b6101fa6101f53660046124fc565b6108f9565b60405161017591906128ab565b6101b1610215366004612369565b610a0e565b61022d610228366004612211565b610c1a565b60405161017592919061276b565b6101d960095481565b6101b1610252366004612211565b610cc1565b61026a61026536600461227e565b610d46565b6040516101759190612703565b61027f610db6565b604051610175919061290b565b6101b161029a3660046124a9565b610fd5565b6001546102b2906001600160a01b031681565b6040516001600160a01b039091168152602001610175565b6101696102d8366004612211565b60046020526000908152604090205460ff1681565b6000546102b2906001600160a01b031681565b6101b161030e366004612305565b611185565b6103266103213660046124fc565b611564565b604051610175959493929190612729565b6101b1610345366004612211565b61162c565b61035d61035836600461227e565b611667565b60405161017598979695949392919061267c565b6101b161037f3660046123e2565b6118e8565b6101b16103923660046122b9565b611bb4565b6103ec60405180610100016040528060006001600160a01b0316815260200160608152602001600081526020016000151581526020016060815260200160608152602001606081526020016000151581525090565b6003826040516103fc9190612660565b9081526040519081900360200190206003015460ff1661045a5760405162461bcd60e51b81526020600482015260146024820152731b185b99081a5cc81b9bdd081d995c9a599a595960621b60448201526064015b60405180910390fd5b60038260405161046a9190612660565b908152604080519182900360209081018320610100840190925281546001600160a01b03168352600182018054918401916104a4906129ff565b80601f01602080910402602001604051908101604052809291908181526020018280546104d0906129ff565b801561051d5780601f106104f25761010080835404028352916020019161051d565b820191906000526020600020905b81548152906001019060200180831161050057829003601f168201915b505050918352505060028201546020820152600382015460ff1615156040820152600482018054606090920191610553906129ff565b80601f016020809104026020016040519081016040528092919081815260200182805461057f906129ff565b80156105cc5780601f106105a1576101008083540402835291602001916105cc565b820191906000526020600020905b8154815290600101906020018083116105af57829003601f168201915b505050505081526020016005820180546105e5906129ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610611906129ff565b801561065e5780601f106106335761010080835404028352916020019161065e565b820191906000526020600020905b81548152906001019060200180831161064157829003601f168201915b50505050508152602001600682018054610677906129ff565b80601f01602080910402602001604051908101604052809291908181526020018280546106a3906129ff565b80156106f05780601f106106c5576101008083540402835291602001916106f0565b820191906000526020600020905b8154815290600101906020018083116106d357829003601f168201915b50505091835250506007919091015460ff16151560209091015290505b919050565b6000546001600160a01b0316331461072957600080fd5b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b6000546001600160a01b0316331461076457600080fd5b6001600160a01b03821660009081526002602052604090206003015460ff16156107c15760405162461bcd60e51b815260206004820152600e60248201526d757365722069732065786973747360901b6044820152606401610451565b6040805160808101825282815281516000808252602082810190945291928301916107fc565b60608152602001906001900390816107e75790505b508152602001600060405190808252806020026020018201604052801561082d578160200160208202803683370190505b50815260016020918201526001600160a01b0384166000908152600282526040902082518051919261086492849290910190611f70565b50602082810151805161087d9260018501920190611ff4565b506040820151805161089991600284019160209091019061204d565b50606091909101516003909101805460ff19169115159190911790555050565b815160208184018101805160088252928201918501919091209190528054829081106108e457600080fd5b90600052602060002001600091509150505481565b6040805160a08101825260608082526000602083018190529282018390528101829052608081019190915260008281526007602052604090819020815160a0810190925280548290829061094c906129ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610978906129ff565b80156109c55780601f1061099a576101008083540402835291602001916109c5565b820191906000526020600020905b8154815290600101906020018083116109a857829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301541660408201526003820154606082015260049091015460ff16151560809091015292915050565b3360009081526005602052604090205460ff16610a5e5760405162461bcd60e51b815260206004820152600e60248201526d4e6f742061206e6f74617269657360901b6044820152606401610451565b600383604051610a6e9190612660565b9081526040519081900360200190206007015460ff16610ac55760405162461bcd60e51b81526020600482015260126024820152716c616e64206973206e6f742065786973747360701b6044820152606401610451565b6001546001600160a01b03163314610b165760405162461bcd60e51b815260206004820152601460248201527313db9b1e481bdc9858db194818d85b8818d85b1b60621b6044820152606401610451565b81600384604051610b279190612660565b90815260200160405180910390206006019080519060200190610b4b929190611f70565b5080600384604051610b5d9190612660565b908152604051908190036020018120600301805492151560ff19909316929092179091553390610b8e908590612660565b60405180910390207f02c254bec0795f97886c74722bdf7fae93289967a7e3fb099a88c723f17f3955600386604051610bc79190612660565b9081526020016040518091039020600401600387604051610be89190612660565b9081526020016040518091039020600501868642604051610c0d95949392919061278f565b60405180910390a3505050565b600260205260009081526040902080548190610c35906129ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610c61906129ff565b8015610cae5780601f10610c8357610100808354040283529160200191610cae565b820191906000526020600020905b815481529060010190602001808311610c9157829003601f168201915b5050506003909301549192505060ff1682565b6000546001600160a01b03163314610cd857600080fd5b6001600160a01b038116610ceb57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060600882604051610d589190612660565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015610daa57602002820191906000526020600020905b815481526020019060010190808311610d96575b50505050509050919050565b610de360405180608001604052806060815260200160608152602001606081526020016000151581525090565b3360009081526002602052604090819020815160808101909252805482908290610e0c906129ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610e38906129ff565b8015610e855780601f10610e5a57610100808354040283529160200191610e85565b820191906000526020600020905b815481529060010190602001808311610e6857829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015610f5f578382906000526020600020018054610ed2906129ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610efe906129ff565b8015610f4b5780601f10610f2057610100808354040283529160200191610f4b565b820191906000526020600020905b815481529060010190602001808311610f2e57829003601f168201915b505050505081526020019060010190610eb3565b50505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610fb657602002820191906000526020600020905b815481526020019060010190808311610fa2575b50505091835250506003919091015460ff161515602090910152905090565b3360009081526004602052604090205460ff166110255760405162461bcd60e51b815260206004820152600e60248201526d2737ba10309039bab93b32bcb7b960911b6044820152606401610451565b6003836040516110359190612660565b9081526040519081900360200190206007015460ff1661108c5760405162461bcd60e51b81526020600482015260126024820152716c616e64206973206e6f742065786973747360701b6044820152606401610451565b6001546001600160a01b031633146110dd5760405162461bcd60e51b815260206004820152601460248201527313db9b1e481bdc9858db194818d85b8818d85b1b60621b6044820152606401610451565b816003846040516110ee9190612660565b908152602001604051809103902060020181905550806003846040516111149190612660565b90815260200160405180910390206005019080519060200190611138929190611f70565b506040513390611149908590612660565b60408051918290038220858352426020840152917fc200ae8df18b7f538d348a1b0a8fb6b591cabace3b6c1b309e0cec72530930429101610c0d565b6001546001600160a01b0316331461119c57600080fd5b60008181526007602052604090206004015460ff16156111fe5760405162461bcd60e51b815260206004820152601760248201527f7472616e73616374696f6e4964206973206578697374730000000000000000006044820152606401610451565b6112088484611d83565b61124b5760405162461bcd60e51b81526020600482015260146024820152731b9bdd08199c9bdb5059191c995cdcc81b185b9960621b6044820152606401610451565b816001600160a01b0316836001600160a01b031614156112ad5760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74206265207472616e7366657272656420746f206f6e6573656c666044820152606401610451565b6003846040516112bd9190612660565b9081526040519081900360200190206003015460ff1661131b5760405162461bcd60e51b81526020600482015260196024820152781d1a1a5cc81b185b99081a5cc81b9bdd0815995c9a599a5959603a1b6044820152606401610451565b6001600160a01b03821660009081526002602052604090206003015460ff1661137d5760405162461bcd60e51b8152602060048201526014602482015273746f55736572206973206e6f742065786973747360601b6044820152606401610451565b6001600160a01b0382166000908152600260209081526040822060019081018054918201815583529181902086516113bc939190910191870190611f70565b506113c78484611e23565b6001600160a01b0380831660008181526002602081815260408084208301805460018181018355918652838620018890559589168085528185209093018054808801825590855282852001879055805160a0810182528a81528083019390935282810194909452426060830152608082019490945284825260078452919020815180519293919261145b9284920190611f70565b5060208201516001820180546001600160a01b03199081166001600160a01b039384161790915560408085015160028501805490931690841617909155606084015160038401556080909301516004909201805460ff1916921515929092179091559051908416906114ce908690612660565b604080519182900382206001600160a01b03861683524260208401529184917fb6bcd7cfdc4168ada92756b190a8bdac9989fd732a43601cccb64665ad20102d910160405180910390a46009805490600061152883612a3a565b919050555060088460405161153d9190612660565b90815260405160209181900382019020805460018101825560009182529190200155505050565b60076020526000908152604090208054819061157f906129ff565b80601f01602080910402602001604051908101604052809291908181526020018280546115ab906129ff565b80156115f85780601f106115cd576101008083540402835291602001916115f8565b820191906000526020600020905b8154815290600101906020018083116115db57829003601f168201915b5050505060018301546002840154600385015460049095015493946001600160a01b03928316949290911692509060ff1685565b6000546001600160a01b0316331461164357600080fd5b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b8051602081830181018051600382529282019190930120915280546001820180546001600160a01b03909216929161169e906129ff565b80601f01602080910402602001604051908101604052809291908181526020018280546116ca906129ff565b80156117175780601f106116ec57610100808354040283529160200191611717565b820191906000526020600020905b8154815290600101906020018083116116fa57829003601f168201915b50505050600283015460038401546004850180549495929460ff909216935090611740906129ff565b80601f016020809104026020016040519081016040528092919081815260200182805461176c906129ff565b80156117b95780601f1061178e576101008083540402835291602001916117b9565b820191906000526020600020905b81548152906001019060200180831161179c57829003601f168201915b5050505050908060050180546117ce906129ff565b80601f01602080910402602001604051908101604052809291908181526020018280546117fa906129ff565b80156118475780601f1061181c57610100808354040283529160200191611847565b820191906000526020600020905b81548152906001019060200180831161182a57829003601f168201915b50505050509080600601805461185c906129ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611888906129ff565b80156118d55780601f106118aa576101008083540402835291602001916118d5565b820191906000526020600020905b8154815290600101906020018083116118b857829003601f168201915b5050506007909301549192505060ff1688565b3360009081526002602052604090206003015460ff166119385760405162461bcd60e51b815260206004820152600b60248201526a34b9903737ba103ab9b2b960a91b6044820152606401610451565b6003836040516119489190612660565b9081526040519081900360200190206007015460ff161561199c5760405162461bcd60e51b815260206004820152600e60248201526d6c616e642069732065786973747360901b6044820152606401610451565b604080516101008101825233815260208082018590526000828401819052606083018190528351808301855281815260808401528351808301855281815260a084015283519182018452815260c0820152600160e08201529051600390611a04908690612660565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b039091161781558282015180519192611a4a92600185019290910190611f70565b5060408201516002820155606082015160038201805460ff191691151591909117905560808201518051611a88916004840191602090910190611f70565b5060a08201518051611aa4916005840191602090910190611f70565b5060c08201518051611ac0916006840191602090910190611f70565b5060e091909101516007909101805460ff19169115159190911790556040518190600390611aef908690612660565b90815260200160405180910390206004019080519060200190611b13929190611f70565b5033600090815260026020908152604082206001908101805491820181558352918190208551611b4a939190910191860190611f70565b506040513390611b5b908590612660565b60405180910390207f0db565b66bc7b7d853b058610a600e099197798649c0dfa27c11fd7a82ecab7184604051611b929190612716565b60405180910390a360068054906000611baa83612a3a565b9190505550505050565b8133611bc08282611d83565b611bfc5760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081e5bdd5c881b185b99609a1b6044820152606401610451565b336001600160a01b0384161415611c555760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74206265207472616e7366657272656420746f206f6e6573656c666044820152606401610451565b600384604051611c659190612660565b9081526040519081900360200190206003015460ff16611cc35760405162461bcd60e51b81526020600482015260196024820152781d1a1a5cc81b185b99081a5cc81b9bdd0815995c9a599a5959603a1b6044820152606401610451565b6001600160a01b03831660009081526002602052604090206003015460ff16611d255760405162461bcd60e51b8152602060048201526014602482015273746f55736572206973206e6f742065786973747360601b6044820152606401610451565b6040513390611d35908690612660565b604080519182900382206001600160a01b0387168352426020840152917f5248c259bc895d2c422508ce73ea783fe4bda339c570eaf7f4c4fd5859b54b38910160405180910390a350505050565b6001600160a01b0381166000908152600260205260408120815b6001820154811015611e16578480519060200120826001018281548110611dd457634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051611deb91906125f1565b60405180910390201415611e0457600192505050611e1d565b80611e0e81612a3a565b915050611d9d565b5060009150505b92915050565b6001600160a01b0381166000908152600260205260408120905b6001820154811015611f6a578380519060200120826001018281548110611e7457634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051611e8b91906125f1565b60405180910390201415611f5857600180830180549091611eab916129bc565b81548110611ec957634e487b7160e01b600052603260045260246000fd5b90600052602060002001826001018281548110611ef657634e487b7160e01b600052603260045260246000fd5b90600052602060002001908054611f0c906129ff565b611f17929190612087565b5081600101805480611f3957634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000611f559190612102565b90555b80611f6281612a3a565b915050611e3d565b50505050565b828054611f7c906129ff565b90600052602060002090601f016020900481019282611f9e5760008555611fe4565b82601f10611fb757805160ff1916838001178555611fe4565b82800160010185558215611fe4579182015b82811115611fe4578251825591602001919060010190611fc9565b50611ff0929150612141565b5090565b828054828255906000526020600020908101928215612041579160200282015b828111156120415782518051612031918491602090910190611f70565b5091602001919060010190612014565b50611ff0929150612156565b828054828255906000526020600020908101928215611fe45791602002820182811115611fe4578251825591602001919060010190611fc9565b828054612093906129ff565b90600052602060002090601f0160209004810192826120b55760008555611fe4565b82601f106120c65780548555611fe4565b82800160010185558215611fe457600052602060002091601f016020900482015b82811115611fe45782548255916001019190600101906120e7565b50805461210e906129ff565b6000825580601f10612120575061213e565b601f01602090049060005260206000209081019061213e9190612141565b50565b5b80821115611ff05760008155600101612142565b80821115611ff057600061216a8282612102565b50600101612156565b80356001600160a01b038116811461070d57600080fd5b600082601f83011261219a578081fd5b813567ffffffffffffffff808211156121b5576121b5612a6b565b604051601f8301601f19908116603f011681019082821181831017156121dd576121dd612a6b565b816040528381528660208588010111156121f5578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215612222578081fd5b61222b82612173565b9392505050565b60008060408385031215612244578081fd5b61224d83612173565b9150602083013567ffffffffffffffff811115612268578182fd5b6122748582860161218a565b9150509250929050565b60006020828403121561228f578081fd5b813567ffffffffffffffff8111156122a5578182fd5b6122b18482850161218a565b949350505050565b600080604083850312156122cb578182fd5b823567ffffffffffffffff8111156122e1578283fd5b6122ed8582860161218a565b9250506122fc60208401612173565b90509250929050565b6000806000806080858703121561231a578182fd5b843567ffffffffffffffff811115612330578283fd5b61233c8782880161218a565b94505061234b60208601612173565b925061235960408601612173565b9396929550929360600135925050565b60008060006060848603121561237d578283fd5b833567ffffffffffffffff80821115612394578485fd5b6123a08783880161218a565b945060208601359150808211156123b5578384fd5b506123c28682870161218a565b925050604084013580151581146123d7578182fd5b809150509250925092565b6000806000606084860312156123f6578283fd5b833567ffffffffffffffff8082111561240d578485fd5b6124198783880161218a565b9450602086013591508082111561242e578384fd5b61243a8783880161218a565b9350604086013591508082111561244f578283fd5b5061245c8682870161218a565b9150509250925092565b60008060408385031215612478578182fd5b823567ffffffffffffffff81111561248e578283fd5b61249a8582860161218a565b95602094909401359450505050565b6000806000606084860312156124bd578283fd5b833567ffffffffffffffff808211156124d4578485fd5b6124e08783880161218a565b945060208601359350604086013591508082111561244f578283fd5b60006020828403121561250d578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561254357815187529582019590820190600101612527565b509495945050505050565b600081518084526125668160208601602086016129d3565b601f01601f19169290920160200192915050565b60008154612587816129ff565b8085526020600183811680156125a457600181146125b8576125e6565b60ff198516888401526040880195506125e6565b866000528260002060005b858110156125de5781548a82018601529083019084016125c3565b890184019650505b505050505092915050565b60008083546125ff816129ff565b60018281168015612617576001811461262857612654565b60ff19841687528287019450612654565b8786526020808720875b8581101561264b5781548a820152908401908201612632565b50505082870194505b50929695505050505050565b600082516126728184602087016129d3565b9190910192915050565b6001600160a01b0389168152610100602082018190526000906126a18382018b61254e565b9050886040840152871515606084015282810360808401526126c3818861254e565b905082810360a08401526126d7818761254e565b905082810360c08401526126eb818661254e565b91505082151560e08301529998505050505050505050565b60006020825261222b6020830184612514565b60006020825261222b602083018461254e565b600060a0825261273c60a083018861254e565b6001600160a01b0396871660208401529490951660408201526060810192909252151560809091015292915050565b60006040825261277e604083018561254e565b905082151560208301529392505050565b600060a082526127a260a083018861257a565b82810360208401526127b4818861257a565b905082810360408401526127c8818761254e565b94151560608401525050608001529392505050565b6000602082526127f96020830184516001600160a01b03169052565b602083015161010080604085015261281561012085018361254e565b9150604085015160608501526060850151612834608086018215159052565b506080850151601f19808685030160a0870152612851848361254e565b935060a08701519150808685030160c087015261286e848361254e565b935060c08701519150808685030160e08701525061288c838261254e565b92505060e08501516128a18286018215159052565b5090949350505050565b600060208252825160a060208401526128c760c084018261254e565b9050602084015160018060a01b0380821660408601528060408701511660608601525050606084015160808401526080840151151560a08401528091505092915050565b60006020808352835160808285015261292760a085018261254e565b82860151601f19868303810160408801528151808452929350908401918385019080860285018601875b8281101561297d578487830301845261296b82875161254e565b95880195938801939150600101612951565b5060408a01519650838982030160608a01526129998188612514565b965050505050505060608401516129b4608085018215159052565b509392505050565b6000828210156129ce576129ce612a55565b500390565b60005b838110156129ee5781810151838201526020016129d6565b83811115611f6a5750506000910152565b600281046001821680612a1357607f821691505b60208210811415612a3457634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612a4e57612a4e612a55565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c9f561f5dddcce45cc788a313aea7d4e6505029176fcf222e4ea742a04bba54c64736f6c63430008020033",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend, _oracle common.Address) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend, _oracle)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// GetLandTransactionHistory is a free data retrieval call binding the contract method 0x51749d1e.
//
// Solidity: function getLandTransactionHistory(string _landId) view returns(uint256[])
func (_Contract *ContractCaller) GetLandTransactionHistory(opts *bind.CallOpts, _landId string) ([]*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getLandTransactionHistory", _landId)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetLandTransactionHistory is a free data retrieval call binding the contract method 0x51749d1e.
//
// Solidity: function getLandTransactionHistory(string _landId) view returns(uint256[])
func (_Contract *ContractSession) GetLandTransactionHistory(_landId string) ([]*big.Int, error) {
	return _Contract.Contract.GetLandTransactionHistory(&_Contract.CallOpts, _landId)
}

// GetLandTransactionHistory is a free data retrieval call binding the contract method 0x51749d1e.
//
// Solidity: function getLandTransactionHistory(string _landId) view returns(uint256[])
func (_Contract *ContractCallerSession) GetLandTransactionHistory(_landId string) ([]*big.Int, error) {
	return _Contract.Contract.GetLandTransactionHistory(&_Contract.CallOpts, _landId)
}

// GetTransactionDetails is a free data retrieval call binding the contract method 0x0fa683d3.
//
// Solidity: function getTransactionDetails(uint256 _transactionId) view returns((string,address,address,uint256,bool))
func (_Contract *ContractCaller) GetTransactionDetails(opts *bind.CallOpts, _transactionId *big.Int) (LandTransactionTransaction, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getTransactionDetails", _transactionId)

	if err != nil {
		return *new(LandTransactionTransaction), err
	}

	out0 := *abi.ConvertType(out[0], new(LandTransactionTransaction)).(*LandTransactionTransaction)

	return out0, err

}

// GetTransactionDetails is a free data retrieval call binding the contract method 0x0fa683d3.
//
// Solidity: function getTransactionDetails(uint256 _transactionId) view returns((string,address,address,uint256,bool))
func (_Contract *ContractSession) GetTransactionDetails(_transactionId *big.Int) (LandTransactionTransaction, error) {
	return _Contract.Contract.GetTransactionDetails(&_Contract.CallOpts, _transactionId)
}

// GetTransactionDetails is a free data retrieval call binding the contract method 0x0fa683d3.
//
// Solidity: function getTransactionDetails(uint256 _transactionId) view returns((string,address,address,uint256,bool))
func (_Contract *ContractCallerSession) GetTransactionDetails(_transactionId *big.Int) (LandTransactionTransaction, error) {
	return _Contract.Contract.GetTransactionDetails(&_Contract.CallOpts, _transactionId)
}

// Lands is a free data retrieval call binding the contract method 0xb1c8ad0d.
//
// Solidity: function lands(string ) view returns(address owner, string location, uint256 area, bool isVerified, string detailsHash, string reportHash, string documentsHash, bool isVaild)
func (_Contract *ContractCaller) Lands(opts *bind.CallOpts, arg0 string) (struct {
	Owner         common.Address
	Location      string
	Area          *big.Int
	IsVerified    bool
	DetailsHash   string
	ReportHash    string
	DocumentsHash string
	IsVaild       bool
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "lands", arg0)

	outstruct := new(struct {
		Owner         common.Address
		Location      string
		Area          *big.Int
		IsVerified    bool
		DetailsHash   string
		ReportHash    string
		DocumentsHash string
		IsVaild       bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Location = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Area = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.IsVerified = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.DetailsHash = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.ReportHash = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.DocumentsHash = *abi.ConvertType(out[6], new(string)).(*string)
	outstruct.IsVaild = *abi.ConvertType(out[7], new(bool)).(*bool)

	return *outstruct, err

}

// Lands is a free data retrieval call binding the contract method 0xb1c8ad0d.
//
// Solidity: function lands(string ) view returns(address owner, string location, uint256 area, bool isVerified, string detailsHash, string reportHash, string documentsHash, bool isVaild)
func (_Contract *ContractSession) Lands(arg0 string) (struct {
	Owner         common.Address
	Location      string
	Area          *big.Int
	IsVerified    bool
	DetailsHash   string
	ReportHash    string
	DocumentsHash string
	IsVaild       bool
}, error) {
	return _Contract.Contract.Lands(&_Contract.CallOpts, arg0)
}

// Lands is a free data retrieval call binding the contract method 0xb1c8ad0d.
//
// Solidity: function lands(string ) view returns(address owner, string location, uint256 area, bool isVerified, string detailsHash, string reportHash, string documentsHash, bool isVaild)
func (_Contract *ContractCallerSession) Lands(arg0 string) (struct {
	Owner         common.Address
	Location      string
	Area          *big.Int
	IsVerified    bool
	DetailsHash   string
	ReportHash    string
	DocumentsHash string
	IsVaild       bool
}, error) {
	return _Contract.Contract.Lands(&_Contract.CallOpts, arg0)
}

// LandsTransactionIdList is a free data retrieval call binding the contract method 0x0ee4f079.
//
// Solidity: function landsTransactionIdList(string , uint256 ) view returns(uint256)
func (_Contract *ContractCaller) LandsTransactionIdList(opts *bind.CallOpts, arg0 string, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "landsTransactionIdList", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LandsTransactionIdList is a free data retrieval call binding the contract method 0x0ee4f079.
//
// Solidity: function landsTransactionIdList(string , uint256 ) view returns(uint256)
func (_Contract *ContractSession) LandsTransactionIdList(arg0 string, arg1 *big.Int) (*big.Int, error) {
	return _Contract.Contract.LandsTransactionIdList(&_Contract.CallOpts, arg0, arg1)
}

// LandsTransactionIdList is a free data retrieval call binding the contract method 0x0ee4f079.
//
// Solidity: function landsTransactionIdList(string , uint256 ) view returns(uint256)
func (_Contract *ContractCallerSession) LandsTransactionIdList(arg0 string, arg1 *big.Int) (*big.Int, error) {
	return _Contract.Contract.LandsTransactionIdList(&_Contract.CallOpts, arg0, arg1)
}

// Notaries is a free data retrieval call binding the contract method 0x00e168f0.
//
// Solidity: function notaries(address ) view returns(bool)
func (_Contract *ContractCaller) Notaries(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "notaries", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Notaries is a free data retrieval call binding the contract method 0x00e168f0.
//
// Solidity: function notaries(address ) view returns(bool)
func (_Contract *ContractSession) Notaries(arg0 common.Address) (bool, error) {
	return _Contract.Contract.Notaries(&_Contract.CallOpts, arg0)
}

// Notaries is a free data retrieval call binding the contract method 0x00e168f0.
//
// Solidity: function notaries(address ) view returns(bool)
func (_Contract *ContractCallerSession) Notaries(arg0 common.Address) (bool, error) {
	return _Contract.Contract.Notaries(&_Contract.CallOpts, arg0)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_Contract *ContractCaller) Oracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "oracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_Contract *ContractSession) Oracle() (common.Address, error) {
	return _Contract.Contract.Oracle(&_Contract.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_Contract *ContractCallerSession) Oracle() (common.Address, error) {
	return _Contract.Contract.Oracle(&_Contract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCallerSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// QueryLand is a free data retrieval call binding the contract method 0x019a1565.
//
// Solidity: function queryLand(string landId) view returns((address,string,uint256,bool,string,string,string,bool))
func (_Contract *ContractCaller) QueryLand(opts *bind.CallOpts, landId string) (LandRegistryLand, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "queryLand", landId)

	if err != nil {
		return *new(LandRegistryLand), err
	}

	out0 := *abi.ConvertType(out[0], new(LandRegistryLand)).(*LandRegistryLand)

	return out0, err

}

// QueryLand is a free data retrieval call binding the contract method 0x019a1565.
//
// Solidity: function queryLand(string landId) view returns((address,string,uint256,bool,string,string,string,bool))
func (_Contract *ContractSession) QueryLand(landId string) (LandRegistryLand, error) {
	return _Contract.Contract.QueryLand(&_Contract.CallOpts, landId)
}

// QueryLand is a free data retrieval call binding the contract method 0x019a1565.
//
// Solidity: function queryLand(string landId) view returns((address,string,uint256,bool,string,string,string,bool))
func (_Contract *ContractCallerSession) QueryLand(landId string) (LandRegistryLand, error) {
	return _Contract.Contract.QueryLand(&_Contract.CallOpts, landId)
}

// QueryUserInfo is a free data retrieval call binding the contract method 0x5307d396.
//
// Solidity: function queryUserInfo() view returns((string,string[],uint256[],bool))
func (_Contract *ContractCaller) QueryUserInfo(opts *bind.CallOpts) (LandRegistryUser, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "queryUserInfo")

	if err != nil {
		return *new(LandRegistryUser), err
	}

	out0 := *abi.ConvertType(out[0], new(LandRegistryUser)).(*LandRegistryUser)

	return out0, err

}

// QueryUserInfo is a free data retrieval call binding the contract method 0x5307d396.
//
// Solidity: function queryUserInfo() view returns((string,string[],uint256[],bool))
func (_Contract *ContractSession) QueryUserInfo() (LandRegistryUser, error) {
	return _Contract.Contract.QueryUserInfo(&_Contract.CallOpts)
}

// QueryUserInfo is a free data retrieval call binding the contract method 0x5307d396.
//
// Solidity: function queryUserInfo() view returns((string,string[],uint256[],bool))
func (_Contract *ContractCallerSession) QueryUserInfo() (LandRegistryUser, error) {
	return _Contract.Contract.QueryUserInfo(&_Contract.CallOpts)
}

// Surveyors is a free data retrieval call binding the contract method 0x87b6963f.
//
// Solidity: function surveyors(address ) view returns(bool)
func (_Contract *ContractCaller) Surveyors(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "surveyors", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Surveyors is a free data retrieval call binding the contract method 0x87b6963f.
//
// Solidity: function surveyors(address ) view returns(bool)
func (_Contract *ContractSession) Surveyors(arg0 common.Address) (bool, error) {
	return _Contract.Contract.Surveyors(&_Contract.CallOpts, arg0)
}

// Surveyors is a free data retrieval call binding the contract method 0x87b6963f.
//
// Solidity: function surveyors(address ) view returns(bool)
func (_Contract *ContractCallerSession) Surveyors(arg0 common.Address) (bool, error) {
	return _Contract.Contract.Surveyors(&_Contract.CallOpts, arg0)
}

// TransactionCounter is a free data retrieval call binding the contract method 0x14e887e8.
//
// Solidity: function transactionCounter() view returns(uint256)
func (_Contract *ContractCaller) TransactionCounter(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "transactionCounter")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TransactionCounter is a free data retrieval call binding the contract method 0x14e887e8.
//
// Solidity: function transactionCounter() view returns(uint256)
func (_Contract *ContractSession) TransactionCounter() (*big.Int, error) {
	return _Contract.Contract.TransactionCounter(&_Contract.CallOpts)
}

// TransactionCounter is a free data retrieval call binding the contract method 0x14e887e8.
//
// Solidity: function transactionCounter() view returns(uint256)
func (_Contract *ContractCallerSession) TransactionCounter() (*big.Int, error) {
	return _Contract.Contract.TransactionCounter(&_Contract.CallOpts)
}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(string landId, address from, address to, uint256 timestamp, bool isVaild)
func (_Contract *ContractCaller) Transactions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	LandId    string
	From      common.Address
	To        common.Address
	Timestamp *big.Int
	IsVaild   bool
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "transactions", arg0)

	outstruct := new(struct {
		LandId    string
		From      common.Address
		To        common.Address
		Timestamp *big.Int
		IsVaild   bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.LandId = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.From = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.To = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Timestamp = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.IsVaild = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(string landId, address from, address to, uint256 timestamp, bool isVaild)
func (_Contract *ContractSession) Transactions(arg0 *big.Int) (struct {
	LandId    string
	From      common.Address
	To        common.Address
	Timestamp *big.Int
	IsVaild   bool
}, error) {
	return _Contract.Contract.Transactions(&_Contract.CallOpts, arg0)
}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(string landId, address from, address to, uint256 timestamp, bool isVaild)
func (_Contract *ContractCallerSession) Transactions(arg0 *big.Int) (struct {
	LandId    string
	From      common.Address
	To        common.Address
	Timestamp *big.Int
	IsVaild   bool
}, error) {
	return _Contract.Contract.Transactions(&_Contract.CallOpts, arg0)
}

// UserMapping is a free data retrieval call binding the contract method 0x118b9535.
//
// Solidity: function userMapping(address ) view returns(string username, bool isVaild)
func (_Contract *ContractCaller) UserMapping(opts *bind.CallOpts, arg0 common.Address) (struct {
	Username string
	IsVaild  bool
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "userMapping", arg0)

	outstruct := new(struct {
		Username string
		IsVaild  bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Username = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.IsVaild = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// UserMapping is a free data retrieval call binding the contract method 0x118b9535.
//
// Solidity: function userMapping(address ) view returns(string username, bool isVaild)
func (_Contract *ContractSession) UserMapping(arg0 common.Address) (struct {
	Username string
	IsVaild  bool
}, error) {
	return _Contract.Contract.UserMapping(&_Contract.CallOpts, arg0)
}

// UserMapping is a free data retrieval call binding the contract method 0x118b9535.
//
// Solidity: function userMapping(address ) view returns(string username, bool isVaild)
func (_Contract *ContractCallerSession) UserMapping(arg0 common.Address) (struct {
	Username string
	IsVaild  bool
}, error) {
	return _Contract.Contract.UserMapping(&_Contract.CallOpts, arg0)
}

// LandSurveyingArea is a paid mutator transaction binding the contract method 0x6af6909d.
//
// Solidity: function LandSurveyingArea(string _landId, uint256 _area, string _reportHash) returns()
func (_Contract *ContractTransactor) LandSurveyingArea(opts *bind.TransactOpts, _landId string, _area *big.Int, _reportHash string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "LandSurveyingArea", _landId, _area, _reportHash)
}

// LandSurveyingArea is a paid mutator transaction binding the contract method 0x6af6909d.
//
// Solidity: function LandSurveyingArea(string _landId, uint256 _area, string _reportHash) returns()
func (_Contract *ContractSession) LandSurveyingArea(_landId string, _area *big.Int, _reportHash string) (*types.Transaction, error) {
	return _Contract.Contract.LandSurveyingArea(&_Contract.TransactOpts, _landId, _area, _reportHash)
}

// LandSurveyingArea is a paid mutator transaction binding the contract method 0x6af6909d.
//
// Solidity: function LandSurveyingArea(string _landId, uint256 _area, string _reportHash) returns()
func (_Contract *ContractTransactorSession) LandSurveyingArea(_landId string, _area *big.Int, _reportHash string) (*types.Transaction, error) {
	return _Contract.Contract.LandSurveyingArea(&_Contract.TransactOpts, _landId, _area, _reportHash)
}

// AddNotary is a paid mutator transaction binding the contract method 0x0588565f.
//
// Solidity: function addNotary(address _notary) returns()
func (_Contract *ContractTransactor) AddNotary(opts *bind.TransactOpts, _notary common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "addNotary", _notary)
}

// AddNotary is a paid mutator transaction binding the contract method 0x0588565f.
//
// Solidity: function addNotary(address _notary) returns()
func (_Contract *ContractSession) AddNotary(_notary common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddNotary(&_Contract.TransactOpts, _notary)
}

// AddNotary is a paid mutator transaction binding the contract method 0x0588565f.
//
// Solidity: function addNotary(address _notary) returns()
func (_Contract *ContractTransactorSession) AddNotary(_notary common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddNotary(&_Contract.TransactOpts, _notary)
}

// AddSurveyor is a paid mutator transaction binding the contract method 0xad812a52.
//
// Solidity: function addSurveyor(address _surveyor) returns()
func (_Contract *ContractTransactor) AddSurveyor(opts *bind.TransactOpts, _surveyor common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "addSurveyor", _surveyor)
}

// AddSurveyor is a paid mutator transaction binding the contract method 0xad812a52.
//
// Solidity: function addSurveyor(address _surveyor) returns()
func (_Contract *ContractSession) AddSurveyor(_surveyor common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddSurveyor(&_Contract.TransactOpts, _surveyor)
}

// AddSurveyor is a paid mutator transaction binding the contract method 0xad812a52.
//
// Solidity: function addSurveyor(address _surveyor) returns()
func (_Contract *ContractTransactorSession) AddSurveyor(_surveyor common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddSurveyor(&_Contract.TransactOpts, _surveyor)
}

// RegisterLand is a paid mutator transaction binding the contract method 0xb829c12a.
//
// Solidity: function registerLand(string _landId, string _location, string _detailsHash) returns()
func (_Contract *ContractTransactor) RegisterLand(opts *bind.TransactOpts, _landId string, _location string, _detailsHash string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "registerLand", _landId, _location, _detailsHash)
}

// RegisterLand is a paid mutator transaction binding the contract method 0xb829c12a.
//
// Solidity: function registerLand(string _landId, string _location, string _detailsHash) returns()
func (_Contract *ContractSession) RegisterLand(_landId string, _location string, _detailsHash string) (*types.Transaction, error) {
	return _Contract.Contract.RegisterLand(&_Contract.TransactOpts, _landId, _location, _detailsHash)
}

// RegisterLand is a paid mutator transaction binding the contract method 0xb829c12a.
//
// Solidity: function registerLand(string _landId, string _location, string _detailsHash) returns()
func (_Contract *ContractTransactorSession) RegisterLand(_landId string, _location string, _detailsHash string) (*types.Transaction, error) {
	return _Contract.Contract.RegisterLand(&_Contract.TransactOpts, _landId, _location, _detailsHash)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x0ea126f9.
//
// Solidity: function registerUser(address _userAddress, string _userName) returns()
func (_Contract *ContractTransactor) RegisterUser(opts *bind.TransactOpts, _userAddress common.Address, _userName string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "registerUser", _userAddress, _userName)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x0ea126f9.
//
// Solidity: function registerUser(address _userAddress, string _userName) returns()
func (_Contract *ContractSession) RegisterUser(_userAddress common.Address, _userName string) (*types.Transaction, error) {
	return _Contract.Contract.RegisterUser(&_Contract.TransactOpts, _userAddress, _userName)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x0ea126f9.
//
// Solidity: function registerUser(address _userAddress, string _userName) returns()
func (_Contract *ContractTransactorSession) RegisterUser(_userAddress common.Address, _userName string) (*types.Transaction, error) {
	return _Contract.Contract.RegisterUser(&_Contract.TransactOpts, _userAddress, _userName)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(address newOwner) returns()
func (_Contract *ContractTransactor) TransferOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferOwner", newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(address newOwner) returns()
func (_Contract *ContractSession) TransferOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwner(&_Contract.TransactOpts, newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x4fb2e45d.
//
// Solidity: function transferOwner(address newOwner) returns()
func (_Contract *ContractTransactorSession) TransferOwner(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwner(&_Contract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xc0e793c2.
//
// Solidity: function transferOwnership(string _landId, address _to) returns()
func (_Contract *ContractTransactor) TransferOwnership(opts *bind.TransactOpts, _landId string, _to common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferOwnership", _landId, _to)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xc0e793c2.
//
// Solidity: function transferOwnership(string _landId, address _to) returns()
func (_Contract *ContractSession) TransferOwnership(_landId string, _to common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, _landId, _to)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xc0e793c2.
//
// Solidity: function transferOwnership(string _landId, address _to) returns()
func (_Contract *ContractTransactorSession) TransferOwnership(_landId string, _to common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, _landId, _to)
}

// TransferVerify is a paid mutator transaction binding the contract method 0x91383192.
//
// Solidity: function transferVerify(string _landId, address _from, address _to, uint256 _transactionId) returns()
func (_Contract *ContractTransactor) TransferVerify(opts *bind.TransactOpts, _landId string, _from common.Address, _to common.Address, _transactionId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferVerify", _landId, _from, _to, _transactionId)
}

// TransferVerify is a paid mutator transaction binding the contract method 0x91383192.
//
// Solidity: function transferVerify(string _landId, address _from, address _to, uint256 _transactionId) returns()
func (_Contract *ContractSession) TransferVerify(_landId string, _from common.Address, _to common.Address, _transactionId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferVerify(&_Contract.TransactOpts, _landId, _from, _to, _transactionId)
}

// TransferVerify is a paid mutator transaction binding the contract method 0x91383192.
//
// Solidity: function transferVerify(string _landId, address _from, address _to, uint256 _transactionId) returns()
func (_Contract *ContractTransactorSession) TransferVerify(_landId string, _from common.Address, _to common.Address, _transactionId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferVerify(&_Contract.TransactOpts, _landId, _from, _to, _transactionId)
}

// VerifyLand is a paid mutator transaction binding the contract method 0x101dd0eb.
//
// Solidity: function verifyLand(string _landId, string _documentsHash, bool _isVerified) returns()
func (_Contract *ContractTransactor) VerifyLand(opts *bind.TransactOpts, _landId string, _documentsHash string, _isVerified bool) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "verifyLand", _landId, _documentsHash, _isVerified)
}

// VerifyLand is a paid mutator transaction binding the contract method 0x101dd0eb.
//
// Solidity: function verifyLand(string _landId, string _documentsHash, bool _isVerified) returns()
func (_Contract *ContractSession) VerifyLand(_landId string, _documentsHash string, _isVerified bool) (*types.Transaction, error) {
	return _Contract.Contract.VerifyLand(&_Contract.TransactOpts, _landId, _documentsHash, _isVerified)
}

// VerifyLand is a paid mutator transaction binding the contract method 0x101dd0eb.
//
// Solidity: function verifyLand(string _landId, string _documentsHash, bool _isVerified) returns()
func (_Contract *ContractTransactorSession) VerifyLand(_landId string, _documentsHash string, _isVerified bool) (*types.Transaction, error) {
	return _Contract.Contract.VerifyLand(&_Contract.TransactOpts, _landId, _documentsHash, _isVerified)
}

// ContractInitiateTransactionIterator is returned from FilterInitiateTransaction and is used to iterate over the raw logs and unpacked data for InitiateTransaction events raised by the Contract contract.
type ContractInitiateTransactionIterator struct {
	Event *ContractInitiateTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractInitiateTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractInitiateTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractInitiateTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractInitiateTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractInitiateTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractInitiateTransaction represents a InitiateTransaction event raised by the Contract contract.
type ContractInitiateTransaction struct {
	LandId    common.Hash
	From      common.Address
	To        common.Address
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInitiateTransaction is a free log retrieval operation binding the contract event 0x5248c259bc895d2c422508ce73ea783fe4bda339c570eaf7f4c4fd5859b54b38.
//
// Solidity: event InitiateTransaction(string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) FilterInitiateTransaction(opts *bind.FilterOpts, landId []string, from []common.Address) (*ContractInitiateTransactionIterator, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "InitiateTransaction", landIdRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &ContractInitiateTransactionIterator{contract: _Contract.contract, event: "InitiateTransaction", logs: logs, sub: sub}, nil
}

// WatchInitiateTransaction is a free log subscription operation binding the contract event 0x5248c259bc895d2c422508ce73ea783fe4bda339c570eaf7f4c4fd5859b54b38.
//
// Solidity: event InitiateTransaction(string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) WatchInitiateTransaction(opts *bind.WatchOpts, sink chan<- *ContractInitiateTransaction, landId []string, from []common.Address) (event.Subscription, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "InitiateTransaction", landIdRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractInitiateTransaction)
				if err := _Contract.contract.UnpackLog(event, "InitiateTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiateTransaction is a log parse operation binding the contract event 0x5248c259bc895d2c422508ce73ea783fe4bda339c570eaf7f4c4fd5859b54b38.
//
// Solidity: event InitiateTransaction(string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) ParseInitiateTransaction(log types.Log) (*ContractInitiateTransaction, error) {
	event := new(ContractInitiateTransaction)
	if err := _Contract.contract.UnpackLog(event, "InitiateTransaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractLandRegisteredIterator is returned from FilterLandRegistered and is used to iterate over the raw logs and unpacked data for LandRegistered events raised by the Contract contract.
type ContractLandRegisteredIterator struct {
	Event *ContractLandRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractLandRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractLandRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractLandRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractLandRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractLandRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractLandRegistered represents a LandRegistered event raised by the Contract contract.
type ContractLandRegistered struct {
	LandId   common.Hash
	Owner    common.Address
	Location string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLandRegistered is a free log retrieval operation binding the contract event 0x0db565b66bc7b7d853b058610a600e099197798649c0dfa27c11fd7a82ecab71.
//
// Solidity: event LandRegistered(string indexed landId, address indexed owner, string location)
func (_Contract *ContractFilterer) FilterLandRegistered(opts *bind.FilterOpts, landId []string, owner []common.Address) (*ContractLandRegisteredIterator, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "LandRegistered", landIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &ContractLandRegisteredIterator{contract: _Contract.contract, event: "LandRegistered", logs: logs, sub: sub}, nil
}

// WatchLandRegistered is a free log subscription operation binding the contract event 0x0db565b66bc7b7d853b058610a600e099197798649c0dfa27c11fd7a82ecab71.
//
// Solidity: event LandRegistered(string indexed landId, address indexed owner, string location)
func (_Contract *ContractFilterer) WatchLandRegistered(opts *bind.WatchOpts, sink chan<- *ContractLandRegistered, landId []string, owner []common.Address) (event.Subscription, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "LandRegistered", landIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractLandRegistered)
				if err := _Contract.contract.UnpackLog(event, "LandRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLandRegistered is a log parse operation binding the contract event 0x0db565b66bc7b7d853b058610a600e099197798649c0dfa27c11fd7a82ecab71.
//
// Solidity: event LandRegistered(string indexed landId, address indexed owner, string location)
func (_Contract *ContractFilterer) ParseLandRegistered(log types.Log) (*ContractLandRegistered, error) {
	event := new(ContractLandRegistered)
	if err := _Contract.contract.UnpackLog(event, "LandRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractLandSurveyingIterator is returned from FilterLandSurveying and is used to iterate over the raw logs and unpacked data for LandSurveying events raised by the Contract contract.
type ContractLandSurveyingIterator struct {
	Event *ContractLandSurveying // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractLandSurveyingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractLandSurveying)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractLandSurveying)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractLandSurveyingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractLandSurveyingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractLandSurveying represents a LandSurveying event raised by the Contract contract.
type ContractLandSurveying struct {
	LandId           common.Hash
	Area             *big.Int
	SurveyorsAddress common.Address
	Timestam         *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLandSurveying is a free log retrieval operation binding the contract event 0xc200ae8df18b7f538d348a1b0a8fb6b591cabace3b6c1b309e0cec7253093042.
//
// Solidity: event LandSurveying(string indexed landId, uint256 area, address indexed surveyorsAddress, uint256 timestam)
func (_Contract *ContractFilterer) FilterLandSurveying(opts *bind.FilterOpts, landId []string, surveyorsAddress []common.Address) (*ContractLandSurveyingIterator, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}

	var surveyorsAddressRule []interface{}
	for _, surveyorsAddressItem := range surveyorsAddress {
		surveyorsAddressRule = append(surveyorsAddressRule, surveyorsAddressItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "LandSurveying", landIdRule, surveyorsAddressRule)
	if err != nil {
		return nil, err
	}
	return &ContractLandSurveyingIterator{contract: _Contract.contract, event: "LandSurveying", logs: logs, sub: sub}, nil
}

// WatchLandSurveying is a free log subscription operation binding the contract event 0xc200ae8df18b7f538d348a1b0a8fb6b591cabace3b6c1b309e0cec7253093042.
//
// Solidity: event LandSurveying(string indexed landId, uint256 area, address indexed surveyorsAddress, uint256 timestam)
func (_Contract *ContractFilterer) WatchLandSurveying(opts *bind.WatchOpts, sink chan<- *ContractLandSurveying, landId []string, surveyorsAddress []common.Address) (event.Subscription, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}

	var surveyorsAddressRule []interface{}
	for _, surveyorsAddressItem := range surveyorsAddress {
		surveyorsAddressRule = append(surveyorsAddressRule, surveyorsAddressItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "LandSurveying", landIdRule, surveyorsAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractLandSurveying)
				if err := _Contract.contract.UnpackLog(event, "LandSurveying", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLandSurveying is a log parse operation binding the contract event 0xc200ae8df18b7f538d348a1b0a8fb6b591cabace3b6c1b309e0cec7253093042.
//
// Solidity: event LandSurveying(string indexed landId, uint256 area, address indexed surveyorsAddress, uint256 timestam)
func (_Contract *ContractFilterer) ParseLandSurveying(log types.Log) (*ContractLandSurveying, error) {
	event := new(ContractLandSurveying)
	if err := _Contract.contract.UnpackLog(event, "LandSurveying", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractLandVerifiedIterator is returned from FilterLandVerified and is used to iterate over the raw logs and unpacked data for LandVerified events raised by the Contract contract.
type ContractLandVerifiedIterator struct {
	Event *ContractLandVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractLandVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractLandVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractLandVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractLandVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractLandVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractLandVerified represents a LandVerified event raised by the Contract contract.
type ContractLandVerified struct {
	LandId          common.Hash
	DetailsHash     string
	ReportHash      string
	DocumentsHash   string
	IsVerified      bool
	NotariesAddress common.Address
	Timestamp       *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterLandVerified is a free log retrieval operation binding the contract event 0x02c254bec0795f97886c74722bdf7fae93289967a7e3fb099a88c723f17f3955.
//
// Solidity: event LandVerified(string indexed landId, string detailsHash, string reportHash, string documentsHash, bool isVerified, address indexed notariesAddress, uint256 timestamp)
func (_Contract *ContractFilterer) FilterLandVerified(opts *bind.FilterOpts, landId []string, notariesAddress []common.Address) (*ContractLandVerifiedIterator, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}

	var notariesAddressRule []interface{}
	for _, notariesAddressItem := range notariesAddress {
		notariesAddressRule = append(notariesAddressRule, notariesAddressItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "LandVerified", landIdRule, notariesAddressRule)
	if err != nil {
		return nil, err
	}
	return &ContractLandVerifiedIterator{contract: _Contract.contract, event: "LandVerified", logs: logs, sub: sub}, nil
}

// WatchLandVerified is a free log subscription operation binding the contract event 0x02c254bec0795f97886c74722bdf7fae93289967a7e3fb099a88c723f17f3955.
//
// Solidity: event LandVerified(string indexed landId, string detailsHash, string reportHash, string documentsHash, bool isVerified, address indexed notariesAddress, uint256 timestamp)
func (_Contract *ContractFilterer) WatchLandVerified(opts *bind.WatchOpts, sink chan<- *ContractLandVerified, landId []string, notariesAddress []common.Address) (event.Subscription, error) {

	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}

	var notariesAddressRule []interface{}
	for _, notariesAddressItem := range notariesAddress {
		notariesAddressRule = append(notariesAddressRule, notariesAddressItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "LandVerified", landIdRule, notariesAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractLandVerified)
				if err := _Contract.contract.UnpackLog(event, "LandVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLandVerified is a log parse operation binding the contract event 0x02c254bec0795f97886c74722bdf7fae93289967a7e3fb099a88c723f17f3955.
//
// Solidity: event LandVerified(string indexed landId, string detailsHash, string reportHash, string documentsHash, bool isVerified, address indexed notariesAddress, uint256 timestamp)
func (_Contract *ContractFilterer) ParseLandVerified(log types.Log) (*ContractLandVerified, error) {
	event := new(ContractLandVerified)
	if err := _Contract.contract.UnpackLog(event, "LandVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Contract contract.
type ContractOwnershipTransferredIterator struct {
	Event *ContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractOwnershipTransferred represents a OwnershipTransferred event raised by the Contract contract.
type ContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractOwnershipTransferredIterator{contract: _Contract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractOwnershipTransferred)
				if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) ParseOwnershipTransferred(log types.Log) (*ContractOwnershipTransferred, error) {
	event := new(ContractOwnershipTransferred)
	if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTransactionRecordedIterator is returned from FilterTransactionRecorded and is used to iterate over the raw logs and unpacked data for TransactionRecorded events raised by the Contract contract.
type ContractTransactionRecordedIterator struct {
	Event *ContractTransactionRecorded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTransactionRecordedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTransactionRecorded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTransactionRecorded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTransactionRecordedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTransactionRecordedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTransactionRecorded represents a TransactionRecorded event raised by the Contract contract.
type ContractTransactionRecorded struct {
	TransactionId *big.Int
	LandId        common.Hash
	From          common.Address
	To            common.Address
	Timestamp     *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterTransactionRecorded is a free log retrieval operation binding the contract event 0xb6bcd7cfdc4168ada92756b190a8bdac9989fd732a43601cccb64665ad20102d.
//
// Solidity: event TransactionRecorded(uint256 indexed transactionId, string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) FilterTransactionRecorded(opts *bind.FilterOpts, transactionId []*big.Int, landId []string, from []common.Address) (*ContractTransactionRecordedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "TransactionRecorded", transactionIdRule, landIdRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &ContractTransactionRecordedIterator{contract: _Contract.contract, event: "TransactionRecorded", logs: logs, sub: sub}, nil
}

// WatchTransactionRecorded is a free log subscription operation binding the contract event 0xb6bcd7cfdc4168ada92756b190a8bdac9989fd732a43601cccb64665ad20102d.
//
// Solidity: event TransactionRecorded(uint256 indexed transactionId, string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) WatchTransactionRecorded(opts *bind.WatchOpts, sink chan<- *ContractTransactionRecorded, transactionId []*big.Int, landId []string, from []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var landIdRule []interface{}
	for _, landIdItem := range landId {
		landIdRule = append(landIdRule, landIdItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "TransactionRecorded", transactionIdRule, landIdRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTransactionRecorded)
				if err := _Contract.contract.UnpackLog(event, "TransactionRecorded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionRecorded is a log parse operation binding the contract event 0xb6bcd7cfdc4168ada92756b190a8bdac9989fd732a43601cccb64665ad20102d.
//
// Solidity: event TransactionRecorded(uint256 indexed transactionId, string indexed landId, address indexed from, address to, uint256 timestamp)
func (_Contract *ContractFilterer) ParseTransactionRecorded(log types.Log) (*ContractTransactionRecorded, error) {
	event := new(ContractTransactionRecorded)
	if err := _Contract.contract.UnpackLog(event, "TransactionRecorded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
